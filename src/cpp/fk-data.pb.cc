// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fk-data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fk-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fk_data {
class DeviceLocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceLocation>
     _instance;
} _DeviceLocation_default_instance_;
class SensorReadingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorReading>
     _instance;
} _SensorReading_default_instance_;
class LoggedReadingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoggedReading>
     _instance;
} _LoggedReading_default_instance_;
class SensorAndValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorAndValue>
     _instance;
} _SensorAndValue_default_instance_;
class ModuleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ModuleInfo>
     _instance;
} _ModuleInfo_default_instance_;
class SensorInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorInfo>
     _instance;
} _SensorInfo_default_instance_;
class FirmwareDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Firmware>
     _instance;
} _Firmware_default_instance_;
class MetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Metadata>
     _instance;
} _Metadata_default_instance_;
class StatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Status>
     _instance;
} _Status_default_instance_;
class LogMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogMessage>
     _instance;
} _LogMessage_default_instance_;
class ReadingsGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReadingsGroup>
     _instance;
} _ReadingsGroup_default_instance_;
class DataRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DataRecord>
     _instance;
} _DataRecord_default_instance_;

namespace protobuf_fk_2ddata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, fix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, reading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, reading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorAndValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorAndValue, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorAndValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, unitofmeasure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firmware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firmware, git_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firmware, build_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, git_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, resetcause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, modules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, firmware_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, busy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadingsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadingsGroup, reading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadingsGroup, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadingsGroup, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadingsGroup, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadingsGroup, readings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, loggedreading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, readings_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(DeviceLocation)},
  { 10, -1, sizeof(SensorReading)},
  { 19, -1, sizeof(LoggedReading)},
  { 27, -1, sizeof(SensorAndValue)},
  { 34, -1, sizeof(ModuleInfo)},
  { 42, -1, sizeof(SensorInfo)},
  { 50, -1, sizeof(Firmware)},
  { 57, -1, sizeof(Metadata)},
  { 70, -1, sizeof(Status)},
  { 80, -1, sizeof(LogMessage)},
  { 90, -1, sizeof(ReadingsGroup)},
  { 100, -1, sizeof(DataRecord)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorReading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoggedReading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorAndValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModuleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Firmware_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Metadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadingsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataRecord_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fk-data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DeviceLocation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceLocation_default_instance_);_SensorReading_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorReading_default_instance_);_LoggedReading_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoggedReading_default_instance_);_SensorAndValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorAndValue_default_instance_);_ModuleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ModuleInfo_default_instance_);_SensorInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorInfo_default_instance_);_Firmware_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Firmware_default_instance_);_Metadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Metadata_default_instance_);_Status_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Status_default_instance_);_LogMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogMessage_default_instance_);_ReadingsGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReadingsGroup_default_instance_);_DataRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DataRecord_default_instance_);_LoggedReading_default_instance_._instance.get_mutable()->location_ = const_cast< ::fk_data::DeviceLocation*>(
      ::fk_data::DeviceLocation::internal_default_instance());
  _LoggedReading_default_instance_._instance.get_mutable()->reading_ = const_cast< ::fk_data::SensorReading*>(
      ::fk_data::SensorReading::internal_default_instance());
  _Metadata_default_instance_._instance.get_mutable()->firmware_ = const_cast< ::fk_data::Firmware*>(
      ::fk_data::Firmware::internal_default_instance());
  _ReadingsGroup_default_instance_._instance.get_mutable()->location_ = const_cast< ::fk_data::DeviceLocation*>(
      ::fk_data::DeviceLocation::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->loggedreading_ = const_cast< ::fk_data::LoggedReading*>(
      ::fk_data::LoggedReading::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::fk_data::Metadata*>(
      ::fk_data::Metadata::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->log_ = const_cast< ::fk_data::LogMessage*>(
      ::fk_data::LogMessage::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->status_ = const_cast< ::fk_data::Status*>(
      ::fk_data::Status::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->readings_ = const_cast< ::fk_data::ReadingsGroup*>(
      ::fk_data::ReadingsGroup::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfk-data.proto\022\007fk_data\"b\n\016DeviceLocati"
      "on\022\013\n\003fix\030\001 \001(\r\022\014\n\004time\030\002 \001(\004\022\021\n\tlongitu"
      "de\030\003 \001(\002\022\020\n\010latitude\030\004 \001(\002\022\020\n\010altitude\030\005"
      " \001(\002\"M\n\rSensorReading\022\017\n\007reading\030\001 \001(\r\022\014"
      "\n\004time\030\002 \001(\004\022\016\n\006sensor\030\003 \001(\r\022\r\n\005value\030\004 "
      "\001(\002\"t\n\rLoggedReading\022\017\n\007version\030\001 \001(\r\022)\n"
      "\010location\030\002 \001(\0132\027.fk_data.DeviceLocation"
      "\022\'\n\007reading\030\003 \001(\0132\026.fk_data.SensorReadin"
      "g\"/\n\016SensorAndValue\022\016\n\006sensor\030\001 \001(\r\022\r\n\005v"
      "alue\030\002 \001(\002\"7\n\nModuleInfo\022\n\n\002id\030\001 \001(\r\022\017\n\007"
      "address\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\"A\n\nSensorInf"
      "o\022\016\n\006sensor\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\025\n\runitO"
      "fMeasure\030\003 \001(\t\"&\n\010Firmware\022\013\n\003git\030\001 \001(\t\022"
      "\r\n\005build\030\002 \001(\t\"\313\001\n\010Metadata\022\020\n\010deviceId\030"
      "\001 \001(\014\022\014\n\004time\030\002 \001(\004\022\013\n\003git\030\003 \001(\t\022\r\n\005buil"
      "d\030\007 \001(\t\022\022\n\nresetCause\030\004 \001(\r\022$\n\007sensors\030\005"
      " \003(\0132\023.fk_data.SensorInfo\022$\n\007modules\030\006 \003"
      "(\0132\023.fk_data.ModuleInfo\022#\n\010firmware\030\010 \001("
      "\0132\021.fk_data.Firmware\"U\n\006Status\022\014\n\004time\030\001"
      " \001(\004\022\016\n\006uptime\030\002 \001(\r\022\017\n\007battery\030\003 \001(\002\022\016\n"
      "\006memory\030\004 \001(\r\022\014\n\004busy\030\005 \001(\004\"\\\n\nLogMessag"
      "e\022\014\n\004time\030\001 \001(\004\022\016\n\006uptime\030\002 \001(\r\022\r\n\005level"
      "\030\003 \001(\r\022\020\n\010facility\030\004 \001(\t\022\017\n\007message\030\005 \001("
      "\t\"\223\001\n\rReadingsGroup\022\017\n\007reading\030\001 \001(\r\022\014\n\004"
      "time\030\002 \001(\004\022\r\n\005flags\030\003 \001(\r\022)\n\010location\030\004 "
      "\001(\0132\027.fk_data.DeviceLocation\022)\n\010readings"
      "\030\005 \003(\0132\027.fk_data.SensorAndValue\"\315\001\n\nData"
      "Record\022-\n\rloggedReading\030\001 \001(\0132\026.fk_data."
      "LoggedReading\022#\n\010metadata\030\002 \001(\0132\021.fk_dat"
      "a.Metadata\022 \n\003log\030\003 \001(\0132\023.fk_data.LogMes"
      "sage\022\037\n\006status\030\004 \001(\0132\017.fk_data.Status\022(\n"
      "\010readings\030\005 \001(\0132\026.fk_data.ReadingsGroup*"
      "b\n\rDownloadFlags\022\026\n\022READING_FLAGS_NONE\020\000"
      "\022\037\n\033READING_FLAGS_NOT_RECORDING\020\001\022\030\n\024REA"
      "DING_FLAGS_MANUAL\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fk-data.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fk_2ddata_2eproto

const ::google::protobuf::EnumDescriptor* DownloadFlags_descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_enum_descriptors[0];
}
bool DownloadFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceLocation::kFixFieldNumber;
const int DeviceLocation::kTimeFieldNumber;
const int DeviceLocation::kLongitudeFieldNumber;
const int DeviceLocation::kLatitudeFieldNumber;
const int DeviceLocation::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceLocation::DeviceLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.DeviceLocation)
}
DeviceLocation::DeviceLocation(const DeviceLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&time_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:fk_data.DeviceLocation)
}

void DeviceLocation::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&time_)) + sizeof(altitude_));
  _cached_size_ = 0;
}

DeviceLocation::~DeviceLocation() {
  // @@protoc_insertion_point(destructor:fk_data.DeviceLocation)
  SharedDtor();
}

void DeviceLocation::SharedDtor() {
}

void DeviceLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceLocation::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceLocation& DeviceLocation::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceLocation* DeviceLocation::New(::google::protobuf::Arena* arena) const {
  DeviceLocation* n = new DeviceLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.DeviceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&time_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

bool DeviceLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.DeviceLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.DeviceLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.DeviceLocation)
  return false;
#undef DO_
}

void DeviceLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.DeviceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fix = 1;
  if (this->fix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fix(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // float longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.DeviceLocation)
}

::google::protobuf::uint8* DeviceLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.DeviceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fix = 1;
  if (this->fix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fix(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // float longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.DeviceLocation)
  return target;
}

size_t DeviceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.DeviceLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 fix = 1;
  if (this->fix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fix());
  }

  // float longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.DeviceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.DeviceLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.DeviceLocation)
    MergeFrom(*source);
  }
}

void DeviceLocation::MergeFrom(const DeviceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.DeviceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.fix() != 0) {
    set_fix(from.fix());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void DeviceLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.DeviceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceLocation::CopyFrom(const DeviceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.DeviceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLocation::IsInitialized() const {
  return true;
}

void DeviceLocation::Swap(DeviceLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceLocation::InternalSwap(DeviceLocation* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(fix_, other->fix_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceLocation::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceLocation

// uint32 fix = 1;
void DeviceLocation::clear_fix() {
  fix_ = 0u;
}
::google::protobuf::uint32 DeviceLocation::fix() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.fix)
  return fix_;
}
void DeviceLocation::set_fix(::google::protobuf::uint32 value) {
  
  fix_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.fix)
}

// uint64 time = 2;
void DeviceLocation::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeviceLocation::time() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.time)
  return time_;
}
void DeviceLocation::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.time)
}

// float longitude = 3;
void DeviceLocation::clear_longitude() {
  longitude_ = 0;
}
float DeviceLocation::longitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.longitude)
  return longitude_;
}
void DeviceLocation::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.longitude)
}

// float latitude = 4;
void DeviceLocation::clear_latitude() {
  latitude_ = 0;
}
float DeviceLocation::latitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.latitude)
  return latitude_;
}
void DeviceLocation::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.latitude)
}

// float altitude = 5;
void DeviceLocation::clear_altitude() {
  altitude_ = 0;
}
float DeviceLocation::altitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.altitude)
  return altitude_;
}
void DeviceLocation::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.altitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorReading::kReadingFieldNumber;
const int SensorReading::kTimeFieldNumber;
const int SensorReading::kSensorFieldNumber;
const int SensorReading::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorReading::SensorReading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorReading)
}
SensorReading::SensorReading(const SensorReading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorReading)
}

void SensorReading::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
  _cached_size_ = 0;
}

SensorReading::~SensorReading() {
  // @@protoc_insertion_point(destructor:fk_data.SensorReading)
  SharedDtor();
}

void SensorReading::SharedDtor() {
}

void SensorReading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorReading::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorReading& SensorReading::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorReading* SensorReading::New(::google::protobuf::Arena* arena) const {
  SensorReading* n = new SensorReading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorReading::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool SensorReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SensorReading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SensorReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SensorReading)
  return false;
#undef DO_
}

void SensorReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SensorReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reading = 1;
  if (this->reading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reading(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor(), output);
  }

  // float value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SensorReading)
}

::google::protobuf::uint8* SensorReading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reading = 1;
  if (this->reading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reading(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor(), target);
  }

  // float value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorReading)
  return target;
}

size_t SensorReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorReading)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 reading = 1;
  if (this->reading() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reading());
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor());
  }

  // float value = 4;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorReading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorReading)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorReading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorReading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorReading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorReading)
    MergeFrom(*source);
  }
}

void SensorReading::MergeFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.reading() != 0) {
    set_reading(from.reading());
  }
  if (from.sensor() != 0) {
    set_sensor(from.sensor());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SensorReading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorReading::CopyFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorReading::IsInitialized() const {
  return true;
}

void SensorReading::Swap(SensorReading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorReading::InternalSwap(SensorReading* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(reading_, other->reading_);
  swap(sensor_, other->sensor_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorReading::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorReading

// uint32 reading = 1;
void SensorReading::clear_reading() {
  reading_ = 0u;
}
::google::protobuf::uint32 SensorReading::reading() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.reading)
  return reading_;
}
void SensorReading::set_reading(::google::protobuf::uint32 value) {
  
  reading_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.reading)
}

// uint64 time = 2;
void SensorReading::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SensorReading::time() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.time)
  return time_;
}
void SensorReading::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.time)
}

// uint32 sensor = 3;
void SensorReading::clear_sensor() {
  sensor_ = 0u;
}
::google::protobuf::uint32 SensorReading::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.sensor)
  return sensor_;
}
void SensorReading::set_sensor(::google::protobuf::uint32 value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.sensor)
}

// float value = 4;
void SensorReading::clear_value() {
  value_ = 0;
}
float SensorReading::value() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.value)
  return value_;
}
void SensorReading::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggedReading::kVersionFieldNumber;
const int LoggedReading::kLocationFieldNumber;
const int LoggedReading::kReadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggedReading::LoggedReading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LoggedReading)
}
LoggedReading::LoggedReading(const LoggedReading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::fk_data::DeviceLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_reading()) {
    reading_ = new ::fk_data::SensorReading(*from.reading_);
  } else {
    reading_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:fk_data.LoggedReading)
}

void LoggedReading::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&location_)) + sizeof(version_));
  _cached_size_ = 0;
}

LoggedReading::~LoggedReading() {
  // @@protoc_insertion_point(destructor:fk_data.LoggedReading)
  SharedDtor();
}

void LoggedReading::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete reading_;
}

void LoggedReading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggedReading::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoggedReading& LoggedReading::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoggedReading* LoggedReading::New(::google::protobuf::Arena* arena) const {
  LoggedReading* n = new LoggedReading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoggedReading::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LoggedReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && reading_ != NULL) {
    delete reading_;
  }
  reading_ = NULL;
  version_ = 0u;
  _internal_metadata_.Clear();
}

bool LoggedReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.LoggedReading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.DeviceLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.SensorReading reading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.LoggedReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.LoggedReading)
  return false;
#undef DO_
}

void LoggedReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.LoggedReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reading_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.LoggedReading)
}

::google::protobuf::uint8* LoggedReading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LoggedReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->reading_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LoggedReading)
  return target;
}

size_t LoggedReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LoggedReading)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reading_);
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggedReading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LoggedReading)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggedReading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggedReading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LoggedReading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LoggedReading)
    MergeFrom(*source);
  }
}

void LoggedReading::MergeFrom(const LoggedReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LoggedReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::fk_data::DeviceLocation::MergeFrom(from.location());
  }
  if (from.has_reading()) {
    mutable_reading()->::fk_data::SensorReading::MergeFrom(from.reading());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void LoggedReading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LoggedReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggedReading::CopyFrom(const LoggedReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LoggedReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggedReading::IsInitialized() const {
  return true;
}

void LoggedReading::Swap(LoggedReading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoggedReading::InternalSwap(LoggedReading* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(reading_, other->reading_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggedReading::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggedReading

// uint32 version = 1;
void LoggedReading::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 LoggedReading::version() const {
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.version)
  return version_;
}
void LoggedReading::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LoggedReading.version)
}

// .fk_data.DeviceLocation location = 2;
bool LoggedReading::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void LoggedReading::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::fk_data::DeviceLocation& LoggedReading::location() const {
  const ::fk_data::DeviceLocation* p = location_;
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.location)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::DeviceLocation*>(
      &::fk_data::_DeviceLocation_default_instance_);
}
::fk_data::DeviceLocation* LoggedReading::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::fk_data::DeviceLocation;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.LoggedReading.location)
  return location_;
}
::fk_data::DeviceLocation* LoggedReading::release_location() {
  // @@protoc_insertion_point(field_release:fk_data.LoggedReading.location)
  
  ::fk_data::DeviceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void LoggedReading::set_allocated_location(::fk_data::DeviceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoggedReading.location)
}

// .fk_data.SensorReading reading = 3;
bool LoggedReading::has_reading() const {
  return this != internal_default_instance() && reading_ != NULL;
}
void LoggedReading::clear_reading() {
  if (GetArenaNoVirtual() == NULL && reading_ != NULL) delete reading_;
  reading_ = NULL;
}
const ::fk_data::SensorReading& LoggedReading::reading() const {
  const ::fk_data::SensorReading* p = reading_;
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.reading)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::SensorReading*>(
      &::fk_data::_SensorReading_default_instance_);
}
::fk_data::SensorReading* LoggedReading::mutable_reading() {
  
  if (reading_ == NULL) {
    reading_ = new ::fk_data::SensorReading;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.LoggedReading.reading)
  return reading_;
}
::fk_data::SensorReading* LoggedReading::release_reading() {
  // @@protoc_insertion_point(field_release:fk_data.LoggedReading.reading)
  
  ::fk_data::SensorReading* temp = reading_;
  reading_ = NULL;
  return temp;
}
void LoggedReading::set_allocated_reading(::fk_data::SensorReading* reading) {
  delete reading_;
  reading_ = reading;
  if (reading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoggedReading.reading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorAndValue::kSensorFieldNumber;
const int SensorAndValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorAndValue::SensorAndValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorAndValue)
}
SensorAndValue::SensorAndValue(const SensorAndValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_, &from.sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorAndValue)
}

void SensorAndValue::SharedCtor() {
  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  _cached_size_ = 0;
}

SensorAndValue::~SensorAndValue() {
  // @@protoc_insertion_point(destructor:fk_data.SensorAndValue)
  SharedDtor();
}

void SensorAndValue::SharedDtor() {
}

void SensorAndValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorAndValue::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorAndValue& SensorAndValue::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorAndValue* SensorAndValue::New(::google::protobuf::Arena* arena) const {
  SensorAndValue* n = new SensorAndValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorAndValue::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool SensorAndValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SensorAndValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SensorAndValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SensorAndValue)
  return false;
#undef DO_
}

void SensorAndValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SensorAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SensorAndValue)
}

::google::protobuf::uint8* SensorAndValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorAndValue)
  return target;
}

size_t SensorAndValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorAndValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorAndValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorAndValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorAndValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorAndValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorAndValue)
    MergeFrom(*source);
  }
}

void SensorAndValue::MergeFrom(const SensorAndValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor() != 0) {
    set_sensor(from.sensor());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SensorAndValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorAndValue::CopyFrom(const SensorAndValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorAndValue::IsInitialized() const {
  return true;
}

void SensorAndValue::Swap(SensorAndValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorAndValue::InternalSwap(SensorAndValue* other) {
  using std::swap;
  swap(sensor_, other->sensor_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorAndValue::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorAndValue

// uint32 sensor = 1;
void SensorAndValue::clear_sensor() {
  sensor_ = 0u;
}
::google::protobuf::uint32 SensorAndValue::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorAndValue.sensor)
  return sensor_;
}
void SensorAndValue::set_sensor(::google::protobuf::uint32 value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorAndValue.sensor)
}

// float value = 2;
void SensorAndValue::clear_value() {
  value_ = 0;
}
float SensorAndValue::value() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorAndValue.value)
  return value_;
}
void SensorAndValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorAndValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModuleInfo::kIdFieldNumber;
const int ModuleInfo::kAddressFieldNumber;
const int ModuleInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModuleInfo::ModuleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.ModuleInfo)
}
ModuleInfo::ModuleInfo(const ModuleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&id_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:fk_data.ModuleInfo)
}

void ModuleInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&id_)) + sizeof(address_));
  _cached_size_ = 0;
}

ModuleInfo::~ModuleInfo() {
  // @@protoc_insertion_point(destructor:fk_data.ModuleInfo)
  SharedDtor();
}

void ModuleInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleInfo::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModuleInfo& ModuleInfo::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModuleInfo* ModuleInfo::New(::google::protobuf::Arena* arena) const {
  ModuleInfo* n = new ModuleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModuleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.ModuleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&id_)) + sizeof(address_));
  _internal_metadata_.Clear();
}

bool ModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.ModuleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.ModuleInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.ModuleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.ModuleInfo)
  return false;
#undef DO_
}

void ModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.ModuleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->address(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.ModuleInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.ModuleInfo)
}

::google::protobuf::uint8* ModuleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.ModuleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->address(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.ModuleInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.ModuleInfo)
  return target;
}

size_t ModuleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.ModuleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.ModuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModuleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.ModuleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.ModuleInfo)
    MergeFrom(*source);
  }
}

void ModuleInfo::MergeFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.ModuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
}

void ModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.ModuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleInfo::CopyFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.ModuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleInfo::IsInitialized() const {
  return true;
}

void ModuleInfo::Swap(ModuleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModuleInfo::InternalSwap(ModuleInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(address_, other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModuleInfo::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModuleInfo

// uint32 id = 1;
void ModuleInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 ModuleInfo::id() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.id)
  return id_;
}
void ModuleInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.id)
}

// uint32 address = 2;
void ModuleInfo::clear_address() {
  address_ = 0u;
}
::google::protobuf::uint32 ModuleInfo::address() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.address)
  return address_;
}
void ModuleInfo::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.address)
}

// string name = 3;
void ModuleInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ModuleInfo::name() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.name)
  return name_.GetNoArena();
}
void ModuleInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.name)
}
#if LANG_CXX11
void ModuleInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.ModuleInfo.name)
}
#endif
void ModuleInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.ModuleInfo.name)
}
void ModuleInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.ModuleInfo.name)
}
::std::string* ModuleInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModuleInfo::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModuleInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorInfo::kSensorFieldNumber;
const int SensorInfo::kNameFieldNumber;
const int SensorInfo::kUnitOfMeasureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorInfo::SensorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorInfo)
}
SensorInfo::SensorInfo(const SensorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  unitofmeasure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unitofmeasure().size() > 0) {
    unitofmeasure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unitofmeasure_);
  }
  sensor_ = from.sensor_;
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorInfo)
}

void SensorInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_ = 0u;
  _cached_size_ = 0;
}

SensorInfo::~SensorInfo() {
  // @@protoc_insertion_point(destructor:fk_data.SensorInfo)
  SharedDtor();
}

void SensorInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorInfo::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorInfo& SensorInfo::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorInfo* SensorInfo::New(::google::protobuf::Arena* arena) const {
  SensorInfo* n = new SensorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_ = 0u;
  _internal_metadata_.Clear();
}

bool SensorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SensorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.SensorInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unitOfMeasure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitofmeasure()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unitofmeasure().data(), static_cast<int>(this->unitofmeasure().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.SensorInfo.unitOfMeasure"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SensorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SensorInfo)
  return false;
#undef DO_
}

void SensorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unitofmeasure().data(), static_cast<int>(this->unitofmeasure().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.unitOfMeasure");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unitofmeasure(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SensorInfo)
}

::google::protobuf::uint8* SensorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unitofmeasure().data(), static_cast<int>(this->unitofmeasure().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.unitOfMeasure");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unitofmeasure(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorInfo)
  return target;
}

size_t SensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unitofmeasure());
  }

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorInfo)
    MergeFrom(*source);
  }
}

void SensorInfo::MergeFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.unitofmeasure().size() > 0) {

    unitofmeasure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unitofmeasure_);
  }
  if (from.sensor() != 0) {
    set_sensor(from.sensor());
  }
}

void SensorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  return true;
}

void SensorInfo::Swap(SensorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorInfo::InternalSwap(SensorInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  unitofmeasure_.Swap(&other->unitofmeasure_);
  swap(sensor_, other->sensor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorInfo::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorInfo

// uint32 sensor = 1;
void SensorInfo::clear_sensor() {
  sensor_ = 0u;
}
::google::protobuf::uint32 SensorInfo::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.sensor)
  return sensor_;
}
void SensorInfo::set_sensor(::google::protobuf::uint32 value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.sensor)
}

// string name = 2;
void SensorInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SensorInfo::name() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.name)
  return name_.GetNoArena();
}
void SensorInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.name)
}
#if LANG_CXX11
void SensorInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SensorInfo.name)
}
#endif
void SensorInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SensorInfo.name)
}
void SensorInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SensorInfo.name)
}
::std::string* SensorInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.SensorInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorInfo::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.SensorInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SensorInfo.name)
}

// string unitOfMeasure = 3;
void SensorInfo::clear_unitofmeasure() {
  unitofmeasure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SensorInfo::unitofmeasure() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.unitOfMeasure)
  return unitofmeasure_.GetNoArena();
}
void SensorInfo::set_unitofmeasure(const ::std::string& value) {
  
  unitofmeasure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.unitOfMeasure)
}
#if LANG_CXX11
void SensorInfo::set_unitofmeasure(::std::string&& value) {
  
  unitofmeasure_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SensorInfo.unitOfMeasure)
}
#endif
void SensorInfo::set_unitofmeasure(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unitofmeasure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SensorInfo.unitOfMeasure)
}
void SensorInfo::set_unitofmeasure(const char* value, size_t size) {
  
  unitofmeasure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SensorInfo.unitOfMeasure)
}
::std::string* SensorInfo::mutable_unitofmeasure() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.SensorInfo.unitOfMeasure)
  return unitofmeasure_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorInfo::release_unitofmeasure() {
  // @@protoc_insertion_point(field_release:fk_data.SensorInfo.unitOfMeasure)
  
  return unitofmeasure_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorInfo::set_allocated_unitofmeasure(::std::string* unitofmeasure) {
  if (unitofmeasure != NULL) {
    
  } else {
    
  }
  unitofmeasure_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unitofmeasure);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SensorInfo.unitOfMeasure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Firmware::kGitFieldNumber;
const int Firmware::kBuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Firmware::Firmware()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Firmware)
}
Firmware::Firmware(const Firmware& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.git().size() > 0) {
    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.build().size() > 0) {
    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.Firmware)
}

void Firmware::SharedCtor() {
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Firmware::~Firmware() {
  // @@protoc_insertion_point(destructor:fk_data.Firmware)
  SharedDtor();
}

void Firmware::SharedDtor() {
  git_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Firmware::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Firmware::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Firmware& Firmware::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Firmware* Firmware::New(::google::protobuf::Arena* arena) const {
  Firmware* n = new Firmware;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Firmware::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Firmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Firmware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Firmware)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string git = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_git()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->git().data(), static_cast<int>(this->git().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Firmware.git"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string build = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->build().data(), static_cast<int>(this->build().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Firmware.build"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Firmware)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Firmware)
  return false;
#undef DO_
}

void Firmware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Firmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string git = 1;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.git");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->git(), output);
  }

  // string build = 2;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.build");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->build(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Firmware)
}

::google::protobuf::uint8* Firmware::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Firmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string git = 1;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.git");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->git(), target);
  }

  // string build = 2;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.build");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->build(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Firmware)
  return target;
}

size_t Firmware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Firmware)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string git = 1;
  if (this->git().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->git());
  }

  // string build = 2;
  if (this->build().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Firmware::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Firmware)
  GOOGLE_DCHECK_NE(&from, this);
  const Firmware* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Firmware>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Firmware)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Firmware)
    MergeFrom(*source);
  }
}

void Firmware::MergeFrom(const Firmware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Firmware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.git().size() > 0) {

    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  if (from.build().size() > 0) {

    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
}

void Firmware::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Firmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Firmware::CopyFrom(const Firmware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Firmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Firmware::IsInitialized() const {
  return true;
}

void Firmware::Swap(Firmware* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Firmware::InternalSwap(Firmware* other) {
  using std::swap;
  git_.Swap(&other->git_);
  build_.Swap(&other->build_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Firmware::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Firmware

// string git = 1;
void Firmware::clear_git() {
  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Firmware::git() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.git)
  return git_.GetNoArena();
}
void Firmware::set_git(const ::std::string& value) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.git)
}
#if LANG_CXX11
void Firmware::set_git(::std::string&& value) {
  
  git_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.git)
}
#endif
void Firmware::set_git(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.git)
}
void Firmware::set_git(const char* value, size_t size) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.git)
}
::std::string* Firmware::mutable_git() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.git)
  return git_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Firmware::release_git() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.git)
  
  return git_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Firmware::set_allocated_git(::std::string* git) {
  if (git != NULL) {
    
  } else {
    
  }
  git_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), git);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.git)
}

// string build = 2;
void Firmware::clear_build() {
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Firmware::build() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.build)
  return build_.GetNoArena();
}
void Firmware::set_build(const ::std::string& value) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.build)
}
#if LANG_CXX11
void Firmware::set_build(::std::string&& value) {
  
  build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.build)
}
#endif
void Firmware::set_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.build)
}
void Firmware::set_build(const char* value, size_t size) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.build)
}
::std::string* Firmware::mutable_build() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.build)
  return build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Firmware::release_build() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.build)
  
  return build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Firmware::set_allocated_build(::std::string* build) {
  if (build != NULL) {
    
  } else {
    
  }
  build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.build)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kDeviceIdFieldNumber;
const int Metadata::kTimeFieldNumber;
const int Metadata::kGitFieldNumber;
const int Metadata::kBuildFieldNumber;
const int Metadata::kResetCauseFieldNumber;
const int Metadata::kSensorsFieldNumber;
const int Metadata::kModulesFieldNumber;
const int Metadata::kFirmwareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensors_(from.sensors_),
      modules_(from.modules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.git().size() > 0) {
    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.build().size() > 0) {
    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  if (from.has_firmware()) {
    firmware_ = new ::fk_data::Firmware(*from.firmware_);
  } else {
    firmware_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&resetcause_) -
    reinterpret_cast<char*>(&time_)) + sizeof(resetcause_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Metadata)
}

void Metadata::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&firmware_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resetcause_) -
      reinterpret_cast<char*>(&firmware_)) + sizeof(resetcause_));
  _cached_size_ = 0;
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:fk_data.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  git_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete firmware_;
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Metadata& Metadata::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Metadata* Metadata::New(::google::protobuf::Arena* arena) const {
  Metadata* n = new Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  modules_.Clear();
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && firmware_ != NULL) {
    delete firmware_;
  }
  firmware_ = NULL;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resetcause_) -
      reinterpret_cast<char*>(&time_)) + sizeof(resetcause_));
  _internal_metadata_.Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes deviceId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string git = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_git()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->git().data(), static_cast<int>(this->git().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Metadata.git"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 resetCause = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetcause_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.SensorInfo sensors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.ModuleInfo modules = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string build = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->build().data(), static_cast<int>(this->build().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Metadata.build"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Firmware firmware = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firmware()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->deviceid(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // string git = 3;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.git");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->git(), output);
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resetcause(), output);
  }

  // repeated .fk_data.SensorInfo sensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensors(static_cast<int>(i)), output);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->modules(static_cast<int>(i)), output);
  }

  // string build = 7;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.build");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->build(), output);
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->firmware_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Metadata)
}

::google::protobuf::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->deviceid(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // string git = 3;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.git");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->git(), target);
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resetcause(), target);
  }

  // repeated .fk_data.SensorInfo sensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->sensors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->modules(static_cast<int>(i)), deterministic, target);
  }

  // string build = 7;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.build");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->build(), target);
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->firmware_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Metadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.SensorInfo sensors = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors(static_cast<int>(i)));
    }
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->modules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modules(static_cast<int>(i)));
    }
  }

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceid());
  }

  // string git = 3;
  if (this->git().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->git());
  }

  // string build = 7;
  if (this->build().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build());
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->firmware_);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resetcause());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Metadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  modules_.MergeFrom(from.modules_);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.git().size() > 0) {

    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  if (from.build().size() > 0) {

    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  if (from.has_firmware()) {
    mutable_firmware()->::fk_data::Firmware::MergeFrom(from.firmware());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.resetcause() != 0) {
    set_resetcause(from.resetcause());
  }
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  sensors_.InternalSwap(&other->sensors_);
  modules_.InternalSwap(&other->modules_);
  deviceid_.Swap(&other->deviceid_);
  git_.Swap(&other->git_);
  build_.Swap(&other->build_);
  swap(firmware_, other->firmware_);
  swap(time_, other->time_);
  swap(resetcause_, other->resetcause_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadata

// bytes deviceId = 1;
void Metadata::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadata::deviceid() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.deviceId)
  return deviceid_.GetNoArena();
}
void Metadata::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.deviceId)
}
#if LANG_CXX11
void Metadata::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.deviceId)
}
#endif
void Metadata::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.deviceId)
}
void Metadata::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.deviceId)
}
::std::string* Metadata::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_deviceid() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.deviceId)
}

// uint64 time = 2;
void Metadata::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Metadata::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.time)
  return time_;
}
void Metadata::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Metadata.time)
}

// string git = 3;
void Metadata::clear_git() {
  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadata::git() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.git)
  return git_.GetNoArena();
}
void Metadata::set_git(const ::std::string& value) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.git)
}
#if LANG_CXX11
void Metadata::set_git(::std::string&& value) {
  
  git_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.git)
}
#endif
void Metadata::set_git(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.git)
}
void Metadata::set_git(const char* value, size_t size) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.git)
}
::std::string* Metadata::mutable_git() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.git)
  return git_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_git() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.git)
  
  return git_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_git(::std::string* git) {
  if (git != NULL) {
    
  } else {
    
  }
  git_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), git);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.git)
}

// string build = 7;
void Metadata::clear_build() {
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadata::build() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.build)
  return build_.GetNoArena();
}
void Metadata::set_build(const ::std::string& value) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.build)
}
#if LANG_CXX11
void Metadata::set_build(::std::string&& value) {
  
  build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.build)
}
#endif
void Metadata::set_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.build)
}
void Metadata::set_build(const char* value, size_t size) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.build)
}
::std::string* Metadata::mutable_build() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.build)
  return build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_build() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.build)
  
  return build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_build(::std::string* build) {
  if (build != NULL) {
    
  } else {
    
  }
  build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.build)
}

// uint32 resetCause = 4;
void Metadata::clear_resetcause() {
  resetcause_ = 0u;
}
::google::protobuf::uint32 Metadata::resetcause() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.resetCause)
  return resetcause_;
}
void Metadata::set_resetcause(::google::protobuf::uint32 value) {
  
  resetcause_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Metadata.resetCause)
}

// repeated .fk_data.SensorInfo sensors = 5;
int Metadata::sensors_size() const {
  return sensors_.size();
}
void Metadata::clear_sensors() {
  sensors_.Clear();
}
const ::fk_data::SensorInfo& Metadata::sensors(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.sensors)
  return sensors_.Get(index);
}
::fk_data::SensorInfo* Metadata::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.sensors)
  return sensors_.Mutable(index);
}
::fk_data::SensorInfo* Metadata::add_sensors() {
  // @@protoc_insertion_point(field_add:fk_data.Metadata.sensors)
  return sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::SensorInfo >*
Metadata::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Metadata.sensors)
  return &sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::SensorInfo >&
Metadata::sensors() const {
  // @@protoc_insertion_point(field_list:fk_data.Metadata.sensors)
  return sensors_;
}

// repeated .fk_data.ModuleInfo modules = 6;
int Metadata::modules_size() const {
  return modules_.size();
}
void Metadata::clear_modules() {
  modules_.Clear();
}
const ::fk_data::ModuleInfo& Metadata::modules(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.modules)
  return modules_.Get(index);
}
::fk_data::ModuleInfo* Metadata::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.modules)
  return modules_.Mutable(index);
}
::fk_data::ModuleInfo* Metadata::add_modules() {
  // @@protoc_insertion_point(field_add:fk_data.Metadata.modules)
  return modules_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::ModuleInfo >*
Metadata::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Metadata.modules)
  return &modules_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::ModuleInfo >&
Metadata::modules() const {
  // @@protoc_insertion_point(field_list:fk_data.Metadata.modules)
  return modules_;
}

// .fk_data.Firmware firmware = 8;
bool Metadata::has_firmware() const {
  return this != internal_default_instance() && firmware_ != NULL;
}
void Metadata::clear_firmware() {
  if (GetArenaNoVirtual() == NULL && firmware_ != NULL) delete firmware_;
  firmware_ = NULL;
}
const ::fk_data::Firmware& Metadata::firmware() const {
  const ::fk_data::Firmware* p = firmware_;
  // @@protoc_insertion_point(field_get:fk_data.Metadata.firmware)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Firmware*>(
      &::fk_data::_Firmware_default_instance_);
}
::fk_data::Firmware* Metadata::mutable_firmware() {
  
  if (firmware_ == NULL) {
    firmware_ = new ::fk_data::Firmware;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.firmware)
  return firmware_;
}
::fk_data::Firmware* Metadata::release_firmware() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.firmware)
  
  ::fk_data::Firmware* temp = firmware_;
  firmware_ = NULL;
  return temp;
}
void Metadata::set_allocated_firmware(::fk_data::Firmware* firmware) {
  delete firmware_;
  firmware_ = firmware;
  if (firmware) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.firmware)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kTimeFieldNumber;
const int Status::kUptimeFieldNumber;
const int Status::kBatteryFieldNumber;
const int Status::kMemoryFieldNumber;
const int Status::kBusyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_) -
    reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Status)
}

void Status::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  _cached_size_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:fk_data.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float battery = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &battery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 memory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 busy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &busy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uptime(), output);
  }

  // float battery = 3;
  if (this->battery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->battery(), output);
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->memory(), output);
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->busy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uptime(), target);
  }

  // float battery = 3;
  if (this->battery() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->battery(), target);
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->memory(), target);
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->busy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Status)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uptime());
  }

  // float battery = 3;
  if (this->battery() != 0) {
    total_size += 1 + 4;
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->busy());
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->memory());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.battery() != 0) {
    set_battery(from.battery());
  }
  if (from.busy() != 0) {
    set_busy(from.busy());
  }
  if (from.memory() != 0) {
    set_memory(from.memory());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(uptime_, other->uptime_);
  swap(battery_, other->battery_);
  swap(busy_, other->busy_);
  swap(memory_, other->memory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// uint64 time = 1;
void Status::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Status::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.time)
  return time_;
}
void Status::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.time)
}

// uint32 uptime = 2;
void Status::clear_uptime() {
  uptime_ = 0u;
}
::google::protobuf::uint32 Status::uptime() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.uptime)
  return uptime_;
}
void Status::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.uptime)
}

// float battery = 3;
void Status::clear_battery() {
  battery_ = 0;
}
float Status::battery() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.battery)
  return battery_;
}
void Status::set_battery(float value) {
  
  battery_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.battery)
}

// uint32 memory = 4;
void Status::clear_memory() {
  memory_ = 0u;
}
::google::protobuf::uint32 Status::memory() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.memory)
  return memory_;
}
void Status::set_memory(::google::protobuf::uint32 value) {
  
  memory_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.memory)
}

// uint64 busy = 5;
void Status::clear_busy() {
  busy_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Status::busy() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.busy)
  return busy_;
}
void Status::set_busy(::google::protobuf::uint64 value) {
  
  busy_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.busy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMessage::kTimeFieldNumber;
const int LogMessage::kUptimeFieldNumber;
const int LogMessage::kLevelFieldNumber;
const int LogMessage::kFacilityFieldNumber;
const int LogMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMessage::LogMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.facility().size() > 0) {
    facility_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&time_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:fk_data.LogMessage)
}

void LogMessage::SharedCtor() {
  facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&time_)) + sizeof(level_));
  _cached_size_ = 0;
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:fk_data.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  facility_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMessage::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogMessage& LogMessage::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogMessage* LogMessage::New(::google::protobuf::Arena* arena) const {
  LogMessage* n = new LogMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facility_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&time_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool LogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.LogMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string facility = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facility()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facility().data(), static_cast<int>(this->facility().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.LogMessage.facility"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.LogMessage.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.LogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.LogMessage)
  return false;
#undef DO_
}

void LogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uptime(), output);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // string facility = 4;
  if (this->facility().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facility().data(), static_cast<int>(this->facility().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.facility");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->facility(), output);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.LogMessage)
}

::google::protobuf::uint8* LogMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uptime(), target);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // string facility = 4;
  if (this->facility().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facility().data(), static_cast<int>(this->facility().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.facility");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->facility(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LogMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string facility = 4;
  if (this->facility().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->facility());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uptime());
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LogMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.facility().size() > 0) {

    facility_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void LogMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::Swap(LogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  facility_.Swap(&other->facility_);
  message_.Swap(&other->message_);
  swap(time_, other->time_);
  swap(uptime_, other->uptime_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMessage::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMessage

// uint64 time = 1;
void LogMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogMessage::time() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.time)
  return time_;
}
void LogMessage::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.time)
}

// uint32 uptime = 2;
void LogMessage::clear_uptime() {
  uptime_ = 0u;
}
::google::protobuf::uint32 LogMessage::uptime() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.uptime)
  return uptime_;
}
void LogMessage::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.uptime)
}

// uint32 level = 3;
void LogMessage::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 LogMessage::level() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.level)
  return level_;
}
void LogMessage::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.level)
}

// string facility = 4;
void LogMessage::clear_facility() {
  facility_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogMessage::facility() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.facility)
  return facility_.GetNoArena();
}
void LogMessage::set_facility(const ::std::string& value) {
  
  facility_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.facility)
}
#if LANG_CXX11
void LogMessage::set_facility(::std::string&& value) {
  
  facility_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LogMessage.facility)
}
#endif
void LogMessage::set_facility(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  facility_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LogMessage.facility)
}
void LogMessage::set_facility(const char* value, size_t size) {
  
  facility_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LogMessage.facility)
}
::std::string* LogMessage::mutable_facility() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.LogMessage.facility)
  return facility_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMessage::release_facility() {
  // @@protoc_insertion_point(field_release:fk_data.LogMessage.facility)
  
  return facility_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMessage::set_allocated_facility(::std::string* facility) {
  if (facility != NULL) {
    
  } else {
    
  }
  facility_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facility);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LogMessage.facility)
}

// string message = 5;
void LogMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogMessage::message() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.message)
  return message_.GetNoArena();
}
void LogMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.message)
}
#if LANG_CXX11
void LogMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LogMessage.message)
}
#endif
void LogMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LogMessage.message)
}
void LogMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LogMessage.message)
}
::std::string* LogMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.LogMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMessage::release_message() {
  // @@protoc_insertion_point(field_release:fk_data.LogMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LogMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadingsGroup::kReadingFieldNumber;
const int ReadingsGroup::kTimeFieldNumber;
const int ReadingsGroup::kFlagsFieldNumber;
const int ReadingsGroup::kLocationFieldNumber;
const int ReadingsGroup::kReadingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadingsGroup::ReadingsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.ReadingsGroup)
}
ReadingsGroup::ReadingsGroup(const ReadingsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      readings_(from.readings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::fk_data::DeviceLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&time_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:fk_data.ReadingsGroup)
}

void ReadingsGroup::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&location_)) + sizeof(flags_));
  _cached_size_ = 0;
}

ReadingsGroup::~ReadingsGroup() {
  // @@protoc_insertion_point(destructor:fk_data.ReadingsGroup)
  SharedDtor();
}

void ReadingsGroup::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void ReadingsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadingsGroup::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadingsGroup& ReadingsGroup::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadingsGroup* ReadingsGroup::New(::google::protobuf::Arena* arena) const {
  ReadingsGroup* n = new ReadingsGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadingsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.ReadingsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readings_.Clear();
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&time_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

bool ReadingsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.ReadingsGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.DeviceLocation location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.SensorAndValue readings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_readings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.ReadingsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.ReadingsGroup)
  return false;
#undef DO_
}

void ReadingsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.ReadingsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reading = 1;
  if (this->reading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reading(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // repeated .fk_data.SensorAndValue readings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->readings(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.ReadingsGroup)
}

::google::protobuf::uint8* ReadingsGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.ReadingsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reading = 1;
  if (this->reading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reading(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, deterministic, target);
  }

  // repeated .fk_data.SensorAndValue readings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->readings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.ReadingsGroup)
  return target;
}

size_t ReadingsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.ReadingsGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.SensorAndValue readings = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->readings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readings(static_cast<int>(i)));
    }
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 reading = 1;
  if (this->reading() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reading());
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadingsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.ReadingsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadingsGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadingsGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.ReadingsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.ReadingsGroup)
    MergeFrom(*source);
  }
}

void ReadingsGroup::MergeFrom(const ReadingsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.ReadingsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readings_.MergeFrom(from.readings_);
  if (from.has_location()) {
    mutable_location()->::fk_data::DeviceLocation::MergeFrom(from.location());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.reading() != 0) {
    set_reading(from.reading());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void ReadingsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.ReadingsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadingsGroup::CopyFrom(const ReadingsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.ReadingsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingsGroup::IsInitialized() const {
  return true;
}

void ReadingsGroup::Swap(ReadingsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadingsGroup::InternalSwap(ReadingsGroup* other) {
  using std::swap;
  readings_.InternalSwap(&other->readings_);
  swap(location_, other->location_);
  swap(time_, other->time_);
  swap(reading_, other->reading_);
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadingsGroup::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadingsGroup

// uint32 reading = 1;
void ReadingsGroup::clear_reading() {
  reading_ = 0u;
}
::google::protobuf::uint32 ReadingsGroup::reading() const {
  // @@protoc_insertion_point(field_get:fk_data.ReadingsGroup.reading)
  return reading_;
}
void ReadingsGroup::set_reading(::google::protobuf::uint32 value) {
  
  reading_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ReadingsGroup.reading)
}

// uint64 time = 2;
void ReadingsGroup::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReadingsGroup::time() const {
  // @@protoc_insertion_point(field_get:fk_data.ReadingsGroup.time)
  return time_;
}
void ReadingsGroup::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ReadingsGroup.time)
}

// uint32 flags = 3;
void ReadingsGroup::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 ReadingsGroup::flags() const {
  // @@protoc_insertion_point(field_get:fk_data.ReadingsGroup.flags)
  return flags_;
}
void ReadingsGroup::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ReadingsGroup.flags)
}

// .fk_data.DeviceLocation location = 4;
bool ReadingsGroup::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void ReadingsGroup::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::fk_data::DeviceLocation& ReadingsGroup::location() const {
  const ::fk_data::DeviceLocation* p = location_;
  // @@protoc_insertion_point(field_get:fk_data.ReadingsGroup.location)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::DeviceLocation*>(
      &::fk_data::_DeviceLocation_default_instance_);
}
::fk_data::DeviceLocation* ReadingsGroup::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::fk_data::DeviceLocation;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.ReadingsGroup.location)
  return location_;
}
::fk_data::DeviceLocation* ReadingsGroup::release_location() {
  // @@protoc_insertion_point(field_release:fk_data.ReadingsGroup.location)
  
  ::fk_data::DeviceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void ReadingsGroup::set_allocated_location(::fk_data::DeviceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.ReadingsGroup.location)
}

// repeated .fk_data.SensorAndValue readings = 5;
int ReadingsGroup::readings_size() const {
  return readings_.size();
}
void ReadingsGroup::clear_readings() {
  readings_.Clear();
}
const ::fk_data::SensorAndValue& ReadingsGroup::readings(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.ReadingsGroup.readings)
  return readings_.Get(index);
}
::fk_data::SensorAndValue* ReadingsGroup::mutable_readings(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.ReadingsGroup.readings)
  return readings_.Mutable(index);
}
::fk_data::SensorAndValue* ReadingsGroup::add_readings() {
  // @@protoc_insertion_point(field_add:fk_data.ReadingsGroup.readings)
  return readings_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::SensorAndValue >*
ReadingsGroup::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.ReadingsGroup.readings)
  return &readings_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::SensorAndValue >&
ReadingsGroup::readings() const {
  // @@protoc_insertion_point(field_list:fk_data.ReadingsGroup.readings)
  return readings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataRecord::kLoggedReadingFieldNumber;
const int DataRecord::kMetadataFieldNumber;
const int DataRecord::kLogFieldNumber;
const int DataRecord::kStatusFieldNumber;
const int DataRecord::kReadingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataRecord::DataRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.DataRecord)
}
DataRecord::DataRecord(const DataRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loggedreading()) {
    loggedreading_ = new ::fk_data::LoggedReading(*from.loggedreading_);
  } else {
    loggedreading_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::fk_data::Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  if (from.has_log()) {
    log_ = new ::fk_data::LogMessage(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::fk_data::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_readings()) {
    readings_ = new ::fk_data::ReadingsGroup(*from.readings_);
  } else {
    readings_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.DataRecord)
}

void DataRecord::SharedCtor() {
  ::memset(&loggedreading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readings_) -
      reinterpret_cast<char*>(&loggedreading_)) + sizeof(readings_));
  _cached_size_ = 0;
}

DataRecord::~DataRecord() {
  // @@protoc_insertion_point(destructor:fk_data.DataRecord)
  SharedDtor();
}

void DataRecord::SharedDtor() {
  if (this != internal_default_instance()) delete loggedreading_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete readings_;
}

void DataRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRecord::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataRecord& DataRecord::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataRecord* DataRecord::New(::google::protobuf::Arena* arena) const {
  DataRecord* n = new DataRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.DataRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && loggedreading_ != NULL) {
    delete loggedreading_;
  }
  loggedreading_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && readings_ != NULL) {
    delete readings_;
  }
  readings_ = NULL;
  _internal_metadata_.Clear();
}

bool DataRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.DataRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fk_data.LoggedReading loggedReading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loggedreading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Metadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.LogMessage log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.ReadingsGroup readings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.DataRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.DataRecord)
  return false;
#undef DO_
}

void DataRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.DataRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->loggedreading_, output);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->log_, output);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_, output);
  }

  // .fk_data.ReadingsGroup readings = 5;
  if (this->has_readings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->readings_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.DataRecord)
}

::google::protobuf::uint8* DataRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.DataRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->loggedreading_, deterministic, target);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metadata_, deterministic, target);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->log_, deterministic, target);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_, deterministic, target);
  }

  // .fk_data.ReadingsGroup readings = 5;
  if (this->has_readings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->readings_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.DataRecord)
  return target;
}

size_t DataRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.DataRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loggedreading_);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->log_);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // .fk_data.ReadingsGroup readings = 5;
  if (this->has_readings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->readings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.DataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.DataRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.DataRecord)
    MergeFrom(*source);
  }
}

void DataRecord::MergeFrom(const DataRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.DataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_loggedreading()) {
    mutable_loggedreading()->::fk_data::LoggedReading::MergeFrom(from.loggedreading());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::fk_data::Metadata::MergeFrom(from.metadata());
  }
  if (from.has_log()) {
    mutable_log()->::fk_data::LogMessage::MergeFrom(from.log());
  }
  if (from.has_status()) {
    mutable_status()->::fk_data::Status::MergeFrom(from.status());
  }
  if (from.has_readings()) {
    mutable_readings()->::fk_data::ReadingsGroup::MergeFrom(from.readings());
  }
}

void DataRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.DataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRecord::CopyFrom(const DataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.DataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRecord::IsInitialized() const {
  return true;
}

void DataRecord::Swap(DataRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataRecord::InternalSwap(DataRecord* other) {
  using std::swap;
  swap(loggedreading_, other->loggedreading_);
  swap(metadata_, other->metadata_);
  swap(log_, other->log_);
  swap(status_, other->status_);
  swap(readings_, other->readings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataRecord::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataRecord

// .fk_data.LoggedReading loggedReading = 1;
bool DataRecord::has_loggedreading() const {
  return this != internal_default_instance() && loggedreading_ != NULL;
}
void DataRecord::clear_loggedreading() {
  if (GetArenaNoVirtual() == NULL && loggedreading_ != NULL) delete loggedreading_;
  loggedreading_ = NULL;
}
const ::fk_data::LoggedReading& DataRecord::loggedreading() const {
  const ::fk_data::LoggedReading* p = loggedreading_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.loggedReading)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::LoggedReading*>(
      &::fk_data::_LoggedReading_default_instance_);
}
::fk_data::LoggedReading* DataRecord::mutable_loggedreading() {
  
  if (loggedreading_ == NULL) {
    loggedreading_ = new ::fk_data::LoggedReading;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.loggedReading)
  return loggedreading_;
}
::fk_data::LoggedReading* DataRecord::release_loggedreading() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.loggedReading)
  
  ::fk_data::LoggedReading* temp = loggedreading_;
  loggedreading_ = NULL;
  return temp;
}
void DataRecord::set_allocated_loggedreading(::fk_data::LoggedReading* loggedreading) {
  delete loggedreading_;
  loggedreading_ = loggedreading;
  if (loggedreading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.loggedReading)
}

// .fk_data.Metadata metadata = 2;
bool DataRecord::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void DataRecord::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::fk_data::Metadata& DataRecord::metadata() const {
  const ::fk_data::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Metadata*>(
      &::fk_data::_Metadata_default_instance_);
}
::fk_data::Metadata* DataRecord::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::fk_data::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.metadata)
  return metadata_;
}
::fk_data::Metadata* DataRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.metadata)
  
  ::fk_data::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void DataRecord::set_allocated_metadata(::fk_data::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.metadata)
}

// .fk_data.LogMessage log = 3;
bool DataRecord::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
void DataRecord::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) delete log_;
  log_ = NULL;
}
const ::fk_data::LogMessage& DataRecord::log() const {
  const ::fk_data::LogMessage* p = log_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.log)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::LogMessage*>(
      &::fk_data::_LogMessage_default_instance_);
}
::fk_data::LogMessage* DataRecord::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::fk_data::LogMessage;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.log)
  return log_;
}
::fk_data::LogMessage* DataRecord::release_log() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.log)
  
  ::fk_data::LogMessage* temp = log_;
  log_ = NULL;
  return temp;
}
void DataRecord::set_allocated_log(::fk_data::LogMessage* log) {
  delete log_;
  log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.log)
}

// .fk_data.Status status = 4;
bool DataRecord::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void DataRecord::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::fk_data::Status& DataRecord::status() const {
  const ::fk_data::Status* p = status_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.status)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Status*>(
      &::fk_data::_Status_default_instance_);
}
::fk_data::Status* DataRecord::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::fk_data::Status;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.status)
  return status_;
}
::fk_data::Status* DataRecord::release_status() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.status)
  
  ::fk_data::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void DataRecord::set_allocated_status(::fk_data::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.status)
}

// .fk_data.ReadingsGroup readings = 5;
bool DataRecord::has_readings() const {
  return this != internal_default_instance() && readings_ != NULL;
}
void DataRecord::clear_readings() {
  if (GetArenaNoVirtual() == NULL && readings_ != NULL) delete readings_;
  readings_ = NULL;
}
const ::fk_data::ReadingsGroup& DataRecord::readings() const {
  const ::fk_data::ReadingsGroup* p = readings_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.readings)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::ReadingsGroup*>(
      &::fk_data::_ReadingsGroup_default_instance_);
}
::fk_data::ReadingsGroup* DataRecord::mutable_readings() {
  
  if (readings_ == NULL) {
    readings_ = new ::fk_data::ReadingsGroup;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.readings)
  return readings_;
}
::fk_data::ReadingsGroup* DataRecord::release_readings() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.readings)
  
  ::fk_data::ReadingsGroup* temp = readings_;
  readings_ = NULL;
  return temp;
}
void DataRecord::set_allocated_readings(::fk_data::ReadingsGroup* readings) {
  delete readings_;
  readings_ = readings;
  if (readings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.readings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fk_data

// @@protoc_insertion_point(global_scope)
