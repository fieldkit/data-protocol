// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fk-data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fk-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fk_data {
class DeviceLocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceLocation>
     _instance;
} _DeviceLocation_default_instance_;
class SensorReadingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorReading>
     _instance;
} _SensorReading_default_instance_;
class LoggedReadingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoggedReading>
     _instance;
} _LoggedReading_default_instance_;
class SensorAndValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorAndValue>
     _instance;
} _SensorAndValue_default_instance_;
class ModuleHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ModuleHeader>
     _instance;
} _ModuleHeader_default_instance_;
class ModuleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ModuleInfo>
     _instance;
} _ModuleInfo_default_instance_;
class SensorInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorInfo>
     _instance;
} _SensorInfo_default_instance_;
class FirmwareDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Firmware>
     _instance;
} _Firmware_default_instance_;
class MetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Metadata>
     _instance;
} _Metadata_default_instance_;
class StatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Status>
     _instance;
} _Status_default_instance_;
class LogMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogMessage>
     _instance;
} _LogMessage_default_instance_;
class SensorGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorGroup>
     _instance;
} _SensorGroup_default_instance_;
class ReadingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Readings>
     _instance;
} _Readings_default_instance_;
class JobScheduleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<JobSchedule>
     _instance;
} _JobSchedule_default_instance_;
class ScheduleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Schedule>
     _instance;
} _Schedule_default_instance_;
class IdentityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Identity>
     _instance;
} _Identity_default_instance_;
class ConditionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Condition>
     _instance;
} _Condition_default_instance_;
class NetworkInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkInfo>
     _instance;
} _NetworkInfo_default_instance_;
class NetworkSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkSettings>
     _instance;
} _NetworkSettings_default_instance_;
class LoraSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoraSettings>
     _instance;
} _LoraSettings_default_instance_;
class DataRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DataRecord>
     _instance;
} _DataRecord_default_instance_;
class SignedRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SignedRecord>
     _instance;
} _SignedRecord_default_instance_;

namespace protobuf_fk_2ddata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, fix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocation, coordinates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, reading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorReading, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedReading, reading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorAndValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorAndValue, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorAndValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleHeader, manufacturer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleHeader, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleHeader, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, firmware_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleInfo, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, unitofmeasure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firmware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firmware, git_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firmware, build_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, git_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, resetcause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, modules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, firmware_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, generation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, busy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGroup, module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGroup, readings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Readings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Readings, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Readings, reading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Readings, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Readings, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Readings, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Readings, sensorgroups_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSchedule, cron_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, readings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, misc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identity, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, flags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkSettings, networks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoraSettings, deviceeui_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoraSettings, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoraSettings, appeui_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoraSettings, frequencyband_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, loggedreading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, readings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, modules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, lora_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, network_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedRecord, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedRecord, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedRecord, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedRecord, record_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(DeviceLocation)},
  { 12, -1, sizeof(SensorReading)},
  { 21, -1, sizeof(LoggedReading)},
  { 29, -1, sizeof(SensorAndValue)},
  { 36, -1, sizeof(ModuleHeader)},
  { 44, -1, sizeof(ModuleInfo)},
  { 56, -1, sizeof(SensorInfo)},
  { 64, -1, sizeof(Firmware)},
  { 71, -1, sizeof(Metadata)},
  { 85, -1, sizeof(Status)},
  { 95, -1, sizeof(LogMessage)},
  { 105, -1, sizeof(SensorGroup)},
  { 112, -1, sizeof(Readings)},
  { 123, -1, sizeof(JobSchedule)},
  { 129, -1, sizeof(Schedule)},
  { 136, -1, sizeof(Identity)},
  { 142, -1, sizeof(Condition)},
  { 148, -1, sizeof(NetworkInfo)},
  { 155, -1, sizeof(NetworkSettings)},
  { 161, -1, sizeof(LoraSettings)},
  { 170, -1, sizeof(DataRecord)},
  { 187, -1, sizeof(SignedRecord)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorReading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoggedReading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorAndValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModuleHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModuleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Firmware_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Metadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Readings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobSchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Schedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Identity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoraSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignedRecord_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fk-data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DeviceLocation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceLocation_default_instance_);_SensorReading_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorReading_default_instance_);_LoggedReading_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoggedReading_default_instance_);_SensorAndValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorAndValue_default_instance_);_ModuleHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ModuleHeader_default_instance_);_ModuleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ModuleInfo_default_instance_);_SensorInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorInfo_default_instance_);_Firmware_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Firmware_default_instance_);_Metadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Metadata_default_instance_);_Status_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Status_default_instance_);_LogMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogMessage_default_instance_);_SensorGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorGroup_default_instance_);_Readings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Readings_default_instance_);_JobSchedule_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_JobSchedule_default_instance_);_Schedule_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Schedule_default_instance_);_Identity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Identity_default_instance_);_Condition_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Condition_default_instance_);_NetworkInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkInfo_default_instance_);_NetworkSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkSettings_default_instance_);_LoraSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoraSettings_default_instance_);_DataRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DataRecord_default_instance_);_SignedRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SignedRecord_default_instance_);_LoggedReading_default_instance_._instance.get_mutable()->location_ = const_cast< ::fk_data::DeviceLocation*>(
      ::fk_data::DeviceLocation::internal_default_instance());
  _LoggedReading_default_instance_._instance.get_mutable()->reading_ = const_cast< ::fk_data::SensorReading*>(
      ::fk_data::SensorReading::internal_default_instance());
  _ModuleInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::fk_data::ModuleHeader*>(
      ::fk_data::ModuleHeader::internal_default_instance());
  _ModuleInfo_default_instance_._instance.get_mutable()->firmware_ = const_cast< ::fk_data::Firmware*>(
      ::fk_data::Firmware::internal_default_instance());
  _Metadata_default_instance_._instance.get_mutable()->firmware_ = const_cast< ::fk_data::Firmware*>(
      ::fk_data::Firmware::internal_default_instance());
  _Readings_default_instance_._instance.get_mutable()->location_ = const_cast< ::fk_data::DeviceLocation*>(
      ::fk_data::DeviceLocation::internal_default_instance());
  _Schedule_default_instance_._instance.get_mutable()->readings_ = const_cast< ::fk_data::JobSchedule*>(
      ::fk_data::JobSchedule::internal_default_instance());
  _Schedule_default_instance_._instance.get_mutable()->misc_ = const_cast< ::fk_data::JobSchedule*>(
      ::fk_data::JobSchedule::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->loggedreading_ = const_cast< ::fk_data::LoggedReading*>(
      ::fk_data::LoggedReading::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::fk_data::Metadata*>(
      ::fk_data::Metadata::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->log_ = const_cast< ::fk_data::LogMessage*>(
      ::fk_data::LogMessage::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->status_ = const_cast< ::fk_data::Status*>(
      ::fk_data::Status::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->readings_ = const_cast< ::fk_data::Readings*>(
      ::fk_data::Readings::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->schedule_ = const_cast< ::fk_data::Schedule*>(
      ::fk_data::Schedule::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->identity_ = const_cast< ::fk_data::Identity*>(
      ::fk_data::Identity::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->condition_ = const_cast< ::fk_data::Condition*>(
      ::fk_data::Condition::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->lora_ = const_cast< ::fk_data::LoraSettings*>(
      ::fk_data::LoraSettings::internal_default_instance());
  _DataRecord_default_instance_._instance.get_mutable()->network_ = const_cast< ::fk_data::NetworkSettings*>(
      ::fk_data::NetworkSettings::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfk-data.proto\022\007fk_data\"\210\001\n\016DeviceLocat"
      "ion\022\017\n\007enabled\030\007 \001(\r\022\013\n\003fix\030\001 \001(\r\022\014\n\004tim"
      "e\030\002 \001(\004\022\021\n\tlongitude\030\003 \001(\002\022\020\n\010latitude\030\004"
      " \001(\002\022\020\n\010altitude\030\005 \001(\002\022\023\n\013coordinates\030\006 "
      "\003(\002\"M\n\rSensorReading\022\017\n\007reading\030\001 \001(\r\022\014\n"
      "\004time\030\002 \001(\004\022\016\n\006sensor\030\003 \001(\r\022\r\n\005value\030\004 \001"
      "(\002\"t\n\rLoggedReading\022\017\n\007version\030\001 \001(\r\022)\n\010"
      "location\030\002 \001(\0132\027.fk_data.DeviceLocation\022"
      "\'\n\007reading\030\003 \001(\0132\026.fk_data.SensorReading"
      "\"/\n\016SensorAndValue\022\016\n\006sensor\030\001 \001(\r\022\r\n\005va"
      "lue\030\002 \001(\002\"C\n\014ModuleHeader\022\024\n\014manufacture"
      "r\030\001 \001(\r\022\014\n\004kind\030\002 \001(\r\022\017\n\007version\030\003 \001(\r\"\273"
      "\001\n\nModuleInfo\022\020\n\010position\030\001 \001(\r\022\017\n\007addre"
      "ss\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022%\n\006header\030\004 \001(\0132\025"
      ".fk_data.ModuleHeader\022#\n\010firmware\030\005 \001(\0132"
      "\021.fk_data.Firmware\022$\n\007sensors\030\006 \003(\0132\023.fk"
      "_data.SensorInfo\022\n\n\002id\030\007 \001(\014\"A\n\nSensorIn"
      "fo\022\016\n\006number\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\025\n\runit"
      "OfMeasure\030\003 \001(\t\"&\n\010Firmware\022\013\n\003git\030\001 \001(\t"
      "\022\r\n\005build\030\002 \001(\t\"\337\001\n\010Metadata\022\020\n\010deviceId"
      "\030\001 \001(\014\022\014\n\004time\030\002 \001(\004\022\013\n\003git\030\003 \001(\t\022\r\n\005bui"
      "ld\030\007 \001(\t\022\022\n\nresetCause\030\004 \001(\r\022$\n\007sensors\030"
      "\005 \003(\0132\023.fk_data.SensorInfo\022$\n\007modules\030\006 "
      "\003(\0132\023.fk_data.ModuleInfo\022#\n\010firmware\030\010 \001"
      "(\0132\021.fk_data.Firmware\022\022\n\ngeneration\030\t \001("
      "\014\"U\n\006Status\022\014\n\004time\030\001 \001(\004\022\016\n\006uptime\030\002 \001("
      "\r\022\017\n\007battery\030\003 \001(\002\022\016\n\006memory\030\004 \001(\r\022\014\n\004bu"
      "sy\030\005 \001(\004\"\\\n\nLogMessage\022\014\n\004time\030\001 \001(\004\022\016\n\006"
      "uptime\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\020\n\010facility\030"
      "\004 \001(\t\022\017\n\007message\030\005 \001(\t\"H\n\013SensorGroup\022\016\n"
      "\006module\030\001 \001(\r\022)\n\010readings\030\002 \003(\0132\027.fk_dat"
      "a.SensorAndValue\"\235\001\n\010Readings\022\014\n\004time\030\001 "
      "\001(\004\022\017\n\007reading\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\014\n\004m"
      "eta\030\006 \001(\r\022)\n\010location\030\004 \001(\0132\027.fk_data.De"
      "viceLocation\022*\n\014sensorGroups\030\005 \003(\0132\024.fk_"
      "data.SensorGroup\"\033\n\013JobSchedule\022\014\n\004cron\030"
      "\001 \001(\014\"V\n\010Schedule\022&\n\010readings\030\001 \001(\0132\024.fk"
      "_data.JobSchedule\022\"\n\004misc\030\002 \001(\0132\024.fk_dat"
      "a.JobSchedule\"\030\n\010Identity\022\014\n\004name\030\001 \001(\t\""
      "\032\n\tCondition\022\r\n\005flags\030\001 \001(\r\"-\n\013NetworkIn"
      "fo\022\014\n\004ssid\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"9\n\017Ne"
      "tworkSettings\022&\n\010networks\030\001 \003(\0132\024.fk_dat"
      "a.NetworkInfo\"X\n\014LoraSettings\022\021\n\tdeviceE"
      "ui\030\001 \001(\014\022\016\n\006appKey\030\002 \001(\014\022\016\n\006appEui\030\003 \001(\014"
      "\022\025\n\rfrequencyBand\030\004 \001(\r\"\275\003\n\nDataRecord\022-"
      "\n\rloggedReading\030\001 \001(\0132\026.fk_data.LoggedRe"
      "ading\022#\n\010metadata\030\002 \001(\0132\021.fk_data.Metada"
      "ta\022 \n\003log\030\003 \001(\0132\023.fk_data.LogMessage\022\037\n\006"
      "status\030\004 \001(\0132\017.fk_data.Status\022#\n\010reading"
      "s\030\005 \001(\0132\021.fk_data.Readings\022$\n\007modules\030\006 "
      "\003(\0132\023.fk_data.ModuleInfo\022#\n\010schedule\030\007 \001"
      "(\0132\021.fk_data.Schedule\022\014\n\004meta\030\010 \001(\004\022#\n\010i"
      "dentity\030\t \001(\0132\021.fk_data.Identity\022%\n\tcond"
      "ition\030\n \001(\0132\022.fk_data.Condition\022#\n\004lora\030"
      "\013 \001(\0132\025.fk_data.LoraSettings\022)\n\007network\030"
      "\014 \001(\0132\030.fk_data.NetworkSettings\"q\n\014Signe"
      "dRecord\022\'\n\004kind\030\001 \001(\0162\031.fk_data.SignedRe"
      "cordKind\022\014\n\004time\030\002 \001(\004\022\014\n\004data\030\003 \001(\014\022\014\n\004"
      "hash\030\004 \001(\014\022\016\n\006record\030\005 \001(\004*b\n\rDownloadFl"
      "ags\022\026\n\022READING_FLAGS_NONE\020\000\022\037\n\033READING_F"
      "LAGS_NOT_RECORDING\020\001\022\030\n\024READING_FLAGS_MA"
      "NUAL\020\002*I\n\016ConditionFlags\022\030\n\024CONDITION_FL"
      "AGS_NONE\020\000\022\035\n\031CONDITION_FLAGS_RECORDING\020"
      "\001*\317\001\n\020SignedRecordKind\022\033\n\027SIGNED_RECORD_"
      "KIND_NONE\020\000\022\036\n\032SIGNED_RECORD_KIND_MODULE"
      "S\020\001\022\037\n\033SIGNED_RECORD_KIND_SCHEDULE\020\002\022\034\n\030"
      "SIGNED_RECORD_KIND_STATE\020\003\022 \n\034SIGNED_REC"
      "ORD_KIND_RAW_STATE\020\004\022\035\n\030SIGNED_RECORD_KI"
      "ND_OTHER\020\377\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fk-data.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fk_2ddata_2eproto

const ::google::protobuf::EnumDescriptor* DownloadFlags_descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_enum_descriptors[0];
}
bool DownloadFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConditionFlags_descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_enum_descriptors[1];
}
bool ConditionFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SignedRecordKind_descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_enum_descriptors[2];
}
bool SignedRecordKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceLocation::kEnabledFieldNumber;
const int DeviceLocation::kFixFieldNumber;
const int DeviceLocation::kTimeFieldNumber;
const int DeviceLocation::kLongitudeFieldNumber;
const int DeviceLocation::kLatitudeFieldNumber;
const int DeviceLocation::kAltitudeFieldNumber;
const int DeviceLocation::kCoordinatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceLocation::DeviceLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.DeviceLocation)
}
DeviceLocation::DeviceLocation(const DeviceLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      coordinates_(from.coordinates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&time_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:fk_data.DeviceLocation)
}

void DeviceLocation::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&time_)) + sizeof(enabled_));
  _cached_size_ = 0;
}

DeviceLocation::~DeviceLocation() {
  // @@protoc_insertion_point(destructor:fk_data.DeviceLocation)
  SharedDtor();
}

void DeviceLocation::SharedDtor() {
}

void DeviceLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceLocation::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceLocation& DeviceLocation::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceLocation* DeviceLocation::New(::google::protobuf::Arena* arena) const {
  DeviceLocation* n = new DeviceLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.DeviceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinates_.Clear();
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&time_)) + sizeof(enabled_));
  _internal_metadata_.Clear();
}

bool DeviceLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.DeviceLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float coordinates = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coordinates())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_coordinates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.DeviceLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.DeviceLocation)
  return false;
#undef DO_
}

void DeviceLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.DeviceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fix = 1;
  if (this->fix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fix(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // float longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  // repeated float coordinates = 6;
  if (this->coordinates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _coordinates_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->coordinates().data(), this->coordinates_size(), output);
  }

  // uint32 enabled = 7;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.DeviceLocation)
}

::google::protobuf::uint8* DeviceLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.DeviceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fix = 1;
  if (this->fix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fix(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // float longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  // repeated float coordinates = 6;
  if (this->coordinates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _coordinates_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->coordinates_, target);
  }

  // uint32 enabled = 7;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.DeviceLocation)
  return target;
}

size_t DeviceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.DeviceLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float coordinates = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->coordinates_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _coordinates_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 fix = 1;
  if (this->fix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fix());
  }

  // float longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // uint32 enabled = 7;
  if (this->enabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enabled());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.DeviceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.DeviceLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.DeviceLocation)
    MergeFrom(*source);
  }
}

void DeviceLocation::MergeFrom(const DeviceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.DeviceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coordinates_.MergeFrom(from.coordinates_);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.fix() != 0) {
    set_fix(from.fix());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void DeviceLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.DeviceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceLocation::CopyFrom(const DeviceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.DeviceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLocation::IsInitialized() const {
  return true;
}

void DeviceLocation::Swap(DeviceLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceLocation::InternalSwap(DeviceLocation* other) {
  using std::swap;
  coordinates_.InternalSwap(&other->coordinates_);
  swap(time_, other->time_);
  swap(fix_, other->fix_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceLocation::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceLocation

// uint32 enabled = 7;
void DeviceLocation::clear_enabled() {
  enabled_ = 0u;
}
::google::protobuf::uint32 DeviceLocation::enabled() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.enabled)
  return enabled_;
}
void DeviceLocation::set_enabled(::google::protobuf::uint32 value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.enabled)
}

// uint32 fix = 1;
void DeviceLocation::clear_fix() {
  fix_ = 0u;
}
::google::protobuf::uint32 DeviceLocation::fix() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.fix)
  return fix_;
}
void DeviceLocation::set_fix(::google::protobuf::uint32 value) {
  
  fix_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.fix)
}

// uint64 time = 2;
void DeviceLocation::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeviceLocation::time() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.time)
  return time_;
}
void DeviceLocation::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.time)
}

// float longitude = 3;
void DeviceLocation::clear_longitude() {
  longitude_ = 0;
}
float DeviceLocation::longitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.longitude)
  return longitude_;
}
void DeviceLocation::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.longitude)
}

// float latitude = 4;
void DeviceLocation::clear_latitude() {
  latitude_ = 0;
}
float DeviceLocation::latitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.latitude)
  return latitude_;
}
void DeviceLocation::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.latitude)
}

// float altitude = 5;
void DeviceLocation::clear_altitude() {
  altitude_ = 0;
}
float DeviceLocation::altitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.altitude)
  return altitude_;
}
void DeviceLocation::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.altitude)
}

// repeated float coordinates = 6;
int DeviceLocation::coordinates_size() const {
  return coordinates_.size();
}
void DeviceLocation::clear_coordinates() {
  coordinates_.Clear();
}
float DeviceLocation::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.coordinates)
  return coordinates_.Get(index);
}
void DeviceLocation::set_coordinates(int index, float value) {
  coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.coordinates)
}
void DeviceLocation::add_coordinates(float value) {
  coordinates_.Add(value);
  // @@protoc_insertion_point(field_add:fk_data.DeviceLocation.coordinates)
}
const ::google::protobuf::RepeatedField< float >&
DeviceLocation::coordinates() const {
  // @@protoc_insertion_point(field_list:fk_data.DeviceLocation.coordinates)
  return coordinates_;
}
::google::protobuf::RepeatedField< float >*
DeviceLocation::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.DeviceLocation.coordinates)
  return &coordinates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorReading::kReadingFieldNumber;
const int SensorReading::kTimeFieldNumber;
const int SensorReading::kSensorFieldNumber;
const int SensorReading::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorReading::SensorReading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorReading)
}
SensorReading::SensorReading(const SensorReading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorReading)
}

void SensorReading::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
  _cached_size_ = 0;
}

SensorReading::~SensorReading() {
  // @@protoc_insertion_point(destructor:fk_data.SensorReading)
  SharedDtor();
}

void SensorReading::SharedDtor() {
}

void SensorReading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorReading::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorReading& SensorReading::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorReading* SensorReading::New(::google::protobuf::Arena* arena) const {
  SensorReading* n = new SensorReading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorReading::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool SensorReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SensorReading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SensorReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SensorReading)
  return false;
#undef DO_
}

void SensorReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SensorReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reading = 1;
  if (this->reading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reading(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor(), output);
  }

  // float value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SensorReading)
}

::google::protobuf::uint8* SensorReading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reading = 1;
  if (this->reading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reading(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor(), target);
  }

  // float value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorReading)
  return target;
}

size_t SensorReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorReading)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 reading = 1;
  if (this->reading() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reading());
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor());
  }

  // float value = 4;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorReading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorReading)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorReading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorReading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorReading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorReading)
    MergeFrom(*source);
  }
}

void SensorReading::MergeFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.reading() != 0) {
    set_reading(from.reading());
  }
  if (from.sensor() != 0) {
    set_sensor(from.sensor());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SensorReading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorReading::CopyFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorReading::IsInitialized() const {
  return true;
}

void SensorReading::Swap(SensorReading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorReading::InternalSwap(SensorReading* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(reading_, other->reading_);
  swap(sensor_, other->sensor_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorReading::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorReading

// uint32 reading = 1;
void SensorReading::clear_reading() {
  reading_ = 0u;
}
::google::protobuf::uint32 SensorReading::reading() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.reading)
  return reading_;
}
void SensorReading::set_reading(::google::protobuf::uint32 value) {
  
  reading_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.reading)
}

// uint64 time = 2;
void SensorReading::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SensorReading::time() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.time)
  return time_;
}
void SensorReading::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.time)
}

// uint32 sensor = 3;
void SensorReading::clear_sensor() {
  sensor_ = 0u;
}
::google::protobuf::uint32 SensorReading::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.sensor)
  return sensor_;
}
void SensorReading::set_sensor(::google::protobuf::uint32 value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.sensor)
}

// float value = 4;
void SensorReading::clear_value() {
  value_ = 0;
}
float SensorReading::value() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.value)
  return value_;
}
void SensorReading::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggedReading::kVersionFieldNumber;
const int LoggedReading::kLocationFieldNumber;
const int LoggedReading::kReadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggedReading::LoggedReading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LoggedReading)
}
LoggedReading::LoggedReading(const LoggedReading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::fk_data::DeviceLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_reading()) {
    reading_ = new ::fk_data::SensorReading(*from.reading_);
  } else {
    reading_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:fk_data.LoggedReading)
}

void LoggedReading::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&location_)) + sizeof(version_));
  _cached_size_ = 0;
}

LoggedReading::~LoggedReading() {
  // @@protoc_insertion_point(destructor:fk_data.LoggedReading)
  SharedDtor();
}

void LoggedReading::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete reading_;
}

void LoggedReading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggedReading::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoggedReading& LoggedReading::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoggedReading* LoggedReading::New(::google::protobuf::Arena* arena) const {
  LoggedReading* n = new LoggedReading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoggedReading::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LoggedReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && reading_ != NULL) {
    delete reading_;
  }
  reading_ = NULL;
  version_ = 0u;
  _internal_metadata_.Clear();
}

bool LoggedReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.LoggedReading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.DeviceLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.SensorReading reading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.LoggedReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.LoggedReading)
  return false;
#undef DO_
}

void LoggedReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.LoggedReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reading_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.LoggedReading)
}

::google::protobuf::uint8* LoggedReading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LoggedReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->reading_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LoggedReading)
  return target;
}

size_t LoggedReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LoggedReading)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reading_);
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggedReading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LoggedReading)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggedReading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggedReading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LoggedReading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LoggedReading)
    MergeFrom(*source);
  }
}

void LoggedReading::MergeFrom(const LoggedReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LoggedReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::fk_data::DeviceLocation::MergeFrom(from.location());
  }
  if (from.has_reading()) {
    mutable_reading()->::fk_data::SensorReading::MergeFrom(from.reading());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void LoggedReading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LoggedReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggedReading::CopyFrom(const LoggedReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LoggedReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggedReading::IsInitialized() const {
  return true;
}

void LoggedReading::Swap(LoggedReading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoggedReading::InternalSwap(LoggedReading* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(reading_, other->reading_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggedReading::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggedReading

// uint32 version = 1;
void LoggedReading::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 LoggedReading::version() const {
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.version)
  return version_;
}
void LoggedReading::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LoggedReading.version)
}

// .fk_data.DeviceLocation location = 2;
bool LoggedReading::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void LoggedReading::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::fk_data::DeviceLocation& LoggedReading::location() const {
  const ::fk_data::DeviceLocation* p = location_;
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.location)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::DeviceLocation*>(
      &::fk_data::_DeviceLocation_default_instance_);
}
::fk_data::DeviceLocation* LoggedReading::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::fk_data::DeviceLocation;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.LoggedReading.location)
  return location_;
}
::fk_data::DeviceLocation* LoggedReading::release_location() {
  // @@protoc_insertion_point(field_release:fk_data.LoggedReading.location)
  
  ::fk_data::DeviceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void LoggedReading::set_allocated_location(::fk_data::DeviceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoggedReading.location)
}

// .fk_data.SensorReading reading = 3;
bool LoggedReading::has_reading() const {
  return this != internal_default_instance() && reading_ != NULL;
}
void LoggedReading::clear_reading() {
  if (GetArenaNoVirtual() == NULL && reading_ != NULL) delete reading_;
  reading_ = NULL;
}
const ::fk_data::SensorReading& LoggedReading::reading() const {
  const ::fk_data::SensorReading* p = reading_;
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.reading)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::SensorReading*>(
      &::fk_data::_SensorReading_default_instance_);
}
::fk_data::SensorReading* LoggedReading::mutable_reading() {
  
  if (reading_ == NULL) {
    reading_ = new ::fk_data::SensorReading;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.LoggedReading.reading)
  return reading_;
}
::fk_data::SensorReading* LoggedReading::release_reading() {
  // @@protoc_insertion_point(field_release:fk_data.LoggedReading.reading)
  
  ::fk_data::SensorReading* temp = reading_;
  reading_ = NULL;
  return temp;
}
void LoggedReading::set_allocated_reading(::fk_data::SensorReading* reading) {
  delete reading_;
  reading_ = reading;
  if (reading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoggedReading.reading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorAndValue::kSensorFieldNumber;
const int SensorAndValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorAndValue::SensorAndValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorAndValue)
}
SensorAndValue::SensorAndValue(const SensorAndValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_, &from.sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorAndValue)
}

void SensorAndValue::SharedCtor() {
  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  _cached_size_ = 0;
}

SensorAndValue::~SensorAndValue() {
  // @@protoc_insertion_point(destructor:fk_data.SensorAndValue)
  SharedDtor();
}

void SensorAndValue::SharedDtor() {
}

void SensorAndValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorAndValue::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorAndValue& SensorAndValue::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorAndValue* SensorAndValue::New(::google::protobuf::Arena* arena) const {
  SensorAndValue* n = new SensorAndValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorAndValue::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool SensorAndValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SensorAndValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SensorAndValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SensorAndValue)
  return false;
#undef DO_
}

void SensorAndValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SensorAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SensorAndValue)
}

::google::protobuf::uint8* SensorAndValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorAndValue)
  return target;
}

size_t SensorAndValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorAndValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorAndValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorAndValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorAndValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorAndValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorAndValue)
    MergeFrom(*source);
  }
}

void SensorAndValue::MergeFrom(const SensorAndValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor() != 0) {
    set_sensor(from.sensor());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SensorAndValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorAndValue::CopyFrom(const SensorAndValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorAndValue::IsInitialized() const {
  return true;
}

void SensorAndValue::Swap(SensorAndValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorAndValue::InternalSwap(SensorAndValue* other) {
  using std::swap;
  swap(sensor_, other->sensor_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorAndValue::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorAndValue

// uint32 sensor = 1;
void SensorAndValue::clear_sensor() {
  sensor_ = 0u;
}
::google::protobuf::uint32 SensorAndValue::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorAndValue.sensor)
  return sensor_;
}
void SensorAndValue::set_sensor(::google::protobuf::uint32 value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorAndValue.sensor)
}

// float value = 2;
void SensorAndValue::clear_value() {
  value_ = 0;
}
float SensorAndValue::value() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorAndValue.value)
  return value_;
}
void SensorAndValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorAndValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModuleHeader::kManufacturerFieldNumber;
const int ModuleHeader::kKindFieldNumber;
const int ModuleHeader::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModuleHeader::ModuleHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.ModuleHeader)
}
ModuleHeader::ModuleHeader(const ModuleHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manufacturer_, &from.manufacturer_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&manufacturer_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:fk_data.ModuleHeader)
}

void ModuleHeader::SharedCtor() {
  ::memset(&manufacturer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&manufacturer_)) + sizeof(version_));
  _cached_size_ = 0;
}

ModuleHeader::~ModuleHeader() {
  // @@protoc_insertion_point(destructor:fk_data.ModuleHeader)
  SharedDtor();
}

void ModuleHeader::SharedDtor() {
}

void ModuleHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleHeader::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModuleHeader& ModuleHeader::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModuleHeader* ModuleHeader::New(::google::protobuf::Arena* arena) const {
  ModuleHeader* n = new ModuleHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModuleHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.ModuleHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&manufacturer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&manufacturer_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool ModuleHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.ModuleHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manufacturer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.ModuleHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.ModuleHeader)
  return false;
#undef DO_
}

void ModuleHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.ModuleHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 manufacturer = 1;
  if (this->manufacturer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manufacturer(), output);
  }

  // uint32 kind = 2;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kind(), output);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.ModuleHeader)
}

::google::protobuf::uint8* ModuleHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.ModuleHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 manufacturer = 1;
  if (this->manufacturer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manufacturer(), target);
  }

  // uint32 kind = 2;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kind(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.ModuleHeader)
  return target;
}

size_t ModuleHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.ModuleHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 manufacturer = 1;
  if (this->manufacturer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->manufacturer());
  }

  // uint32 kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kind());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.ModuleHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModuleHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.ModuleHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.ModuleHeader)
    MergeFrom(*source);
  }
}

void ModuleHeader::MergeFrom(const ModuleHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.ModuleHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer() != 0) {
    set_manufacturer(from.manufacturer());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void ModuleHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.ModuleHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleHeader::CopyFrom(const ModuleHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.ModuleHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleHeader::IsInitialized() const {
  return true;
}

void ModuleHeader::Swap(ModuleHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModuleHeader::InternalSwap(ModuleHeader* other) {
  using std::swap;
  swap(manufacturer_, other->manufacturer_);
  swap(kind_, other->kind_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModuleHeader::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModuleHeader

// uint32 manufacturer = 1;
void ModuleHeader::clear_manufacturer() {
  manufacturer_ = 0u;
}
::google::protobuf::uint32 ModuleHeader::manufacturer() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleHeader.manufacturer)
  return manufacturer_;
}
void ModuleHeader::set_manufacturer(::google::protobuf::uint32 value) {
  
  manufacturer_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ModuleHeader.manufacturer)
}

// uint32 kind = 2;
void ModuleHeader::clear_kind() {
  kind_ = 0u;
}
::google::protobuf::uint32 ModuleHeader::kind() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleHeader.kind)
  return kind_;
}
void ModuleHeader::set_kind(::google::protobuf::uint32 value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ModuleHeader.kind)
}

// uint32 version = 3;
void ModuleHeader::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 ModuleHeader::version() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleHeader.version)
  return version_;
}
void ModuleHeader::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ModuleHeader.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModuleInfo::kPositionFieldNumber;
const int ModuleInfo::kAddressFieldNumber;
const int ModuleInfo::kNameFieldNumber;
const int ModuleInfo::kHeaderFieldNumber;
const int ModuleInfo::kFirmwareFieldNumber;
const int ModuleInfo::kSensorsFieldNumber;
const int ModuleInfo::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModuleInfo::ModuleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.ModuleInfo)
}
ModuleInfo::ModuleInfo(const ModuleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensors_(from.sensors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_header()) {
    header_ = new ::fk_data::ModuleHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_firmware()) {
    firmware_ = new ::fk_data::Firmware(*from.firmware_);
  } else {
    firmware_ = NULL;
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&position_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:fk_data.ModuleInfo)
}

void ModuleInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&header_)) + sizeof(address_));
  _cached_size_ = 0;
}

ModuleInfo::~ModuleInfo() {
  // @@protoc_insertion_point(destructor:fk_data.ModuleInfo)
  SharedDtor();
}

void ModuleInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete firmware_;
}

void ModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleInfo::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModuleInfo& ModuleInfo::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModuleInfo* ModuleInfo::New(::google::protobuf::Arena* arena) const {
  ModuleInfo* n = new ModuleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModuleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.ModuleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && firmware_ != NULL) {
    delete firmware_;
  }
  firmware_ = NULL;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&position_)) + sizeof(address_));
  _internal_metadata_.Clear();
}

bool ModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.ModuleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.ModuleInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.ModuleHeader header = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Firmware firmware = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firmware()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.SensorInfo sensors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.ModuleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.ModuleInfo)
  return false;
#undef DO_
}

void ModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.ModuleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->address(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.ModuleInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // .fk_data.ModuleHeader header = 4;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->header_, output);
  }

  // .fk_data.Firmware firmware = 5;
  if (this->has_firmware()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->firmware_, output);
  }

  // repeated .fk_data.SensorInfo sensors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensors(static_cast<int>(i)), output);
  }

  // bytes id = 7;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.ModuleInfo)
}

::google::protobuf::uint8* ModuleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.ModuleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->address(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.ModuleInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // .fk_data.ModuleHeader header = 4;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->header_, deterministic, target);
  }

  // .fk_data.Firmware firmware = 5;
  if (this->has_firmware()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->firmware_, deterministic, target);
  }

  // repeated .fk_data.SensorInfo sensors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->sensors(static_cast<int>(i)), deterministic, target);
  }

  // bytes id = 7;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.ModuleInfo)
  return target;
}

size_t ModuleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.ModuleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.SensorInfo sensors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes id = 7;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .fk_data.ModuleHeader header = 4;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .fk_data.Firmware firmware = 5;
  if (this->has_firmware()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->firmware_);
  }

  // uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.ModuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModuleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.ModuleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.ModuleInfo)
    MergeFrom(*source);
  }
}

void ModuleInfo::MergeFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.ModuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_header()) {
    mutable_header()->::fk_data::ModuleHeader::MergeFrom(from.header());
  }
  if (from.has_firmware()) {
    mutable_firmware()->::fk_data::Firmware::MergeFrom(from.firmware());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
}

void ModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.ModuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleInfo::CopyFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.ModuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleInfo::IsInitialized() const {
  return true;
}

void ModuleInfo::Swap(ModuleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModuleInfo::InternalSwap(ModuleInfo* other) {
  using std::swap;
  sensors_.InternalSwap(&other->sensors_);
  name_.Swap(&other->name_);
  id_.Swap(&other->id_);
  swap(header_, other->header_);
  swap(firmware_, other->firmware_);
  swap(position_, other->position_);
  swap(address_, other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModuleInfo::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModuleInfo

// uint32 position = 1;
void ModuleInfo::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 ModuleInfo::position() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.position)
  return position_;
}
void ModuleInfo::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.position)
}

// uint32 address = 2;
void ModuleInfo::clear_address() {
  address_ = 0u;
}
::google::protobuf::uint32 ModuleInfo::address() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.address)
  return address_;
}
void ModuleInfo::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.address)
}

// string name = 3;
void ModuleInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ModuleInfo::name() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.name)
  return name_.GetNoArena();
}
void ModuleInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.name)
}
#if LANG_CXX11
void ModuleInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.ModuleInfo.name)
}
#endif
void ModuleInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.ModuleInfo.name)
}
void ModuleInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.ModuleInfo.name)
}
::std::string* ModuleInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModuleInfo::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModuleInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.name)
}

// .fk_data.ModuleHeader header = 4;
bool ModuleInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ModuleInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::fk_data::ModuleHeader& ModuleInfo::header() const {
  const ::fk_data::ModuleHeader* p = header_;
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::ModuleHeader*>(
      &::fk_data::_ModuleHeader_default_instance_);
}
::fk_data::ModuleHeader* ModuleInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::fk_data::ModuleHeader;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.header)
  return header_;
}
::fk_data::ModuleHeader* ModuleInfo::release_header() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.header)
  
  ::fk_data::ModuleHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ModuleInfo::set_allocated_header(::fk_data::ModuleHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.header)
}

// .fk_data.Firmware firmware = 5;
bool ModuleInfo::has_firmware() const {
  return this != internal_default_instance() && firmware_ != NULL;
}
void ModuleInfo::clear_firmware() {
  if (GetArenaNoVirtual() == NULL && firmware_ != NULL) delete firmware_;
  firmware_ = NULL;
}
const ::fk_data::Firmware& ModuleInfo::firmware() const {
  const ::fk_data::Firmware* p = firmware_;
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.firmware)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Firmware*>(
      &::fk_data::_Firmware_default_instance_);
}
::fk_data::Firmware* ModuleInfo::mutable_firmware() {
  
  if (firmware_ == NULL) {
    firmware_ = new ::fk_data::Firmware;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.firmware)
  return firmware_;
}
::fk_data::Firmware* ModuleInfo::release_firmware() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.firmware)
  
  ::fk_data::Firmware* temp = firmware_;
  firmware_ = NULL;
  return temp;
}
void ModuleInfo::set_allocated_firmware(::fk_data::Firmware* firmware) {
  delete firmware_;
  firmware_ = firmware;
  if (firmware) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.firmware)
}

// repeated .fk_data.SensorInfo sensors = 6;
int ModuleInfo::sensors_size() const {
  return sensors_.size();
}
void ModuleInfo::clear_sensors() {
  sensors_.Clear();
}
const ::fk_data::SensorInfo& ModuleInfo::sensors(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.sensors)
  return sensors_.Get(index);
}
::fk_data::SensorInfo* ModuleInfo::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.sensors)
  return sensors_.Mutable(index);
}
::fk_data::SensorInfo* ModuleInfo::add_sensors() {
  // @@protoc_insertion_point(field_add:fk_data.ModuleInfo.sensors)
  return sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::SensorInfo >*
ModuleInfo::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.ModuleInfo.sensors)
  return &sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::SensorInfo >&
ModuleInfo::sensors() const {
  // @@protoc_insertion_point(field_list:fk_data.ModuleInfo.sensors)
  return sensors_;
}

// bytes id = 7;
void ModuleInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ModuleInfo::id() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.id)
  return id_.GetNoArena();
}
void ModuleInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.id)
}
#if LANG_CXX11
void ModuleInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.ModuleInfo.id)
}
#endif
void ModuleInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.ModuleInfo.id)
}
void ModuleInfo::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.ModuleInfo.id)
}
::std::string* ModuleInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModuleInfo::release_id() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModuleInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorInfo::kNumberFieldNumber;
const int SensorInfo::kNameFieldNumber;
const int SensorInfo::kUnitOfMeasureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorInfo::SensorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorInfo)
}
SensorInfo::SensorInfo(const SensorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  unitofmeasure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unitofmeasure().size() > 0) {
    unitofmeasure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unitofmeasure_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorInfo)
}

void SensorInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0u;
  _cached_size_ = 0;
}

SensorInfo::~SensorInfo() {
  // @@protoc_insertion_point(destructor:fk_data.SensorInfo)
  SharedDtor();
}

void SensorInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorInfo::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorInfo& SensorInfo::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorInfo* SensorInfo::New(::google::protobuf::Arena* arena) const {
  SensorInfo* n = new SensorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0u;
  _internal_metadata_.Clear();
}

bool SensorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SensorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.SensorInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unitOfMeasure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitofmeasure()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unitofmeasure().data(), static_cast<int>(this->unitofmeasure().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.SensorInfo.unitOfMeasure"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SensorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SensorInfo)
  return false;
#undef DO_
}

void SensorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unitofmeasure().data(), static_cast<int>(this->unitofmeasure().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.unitOfMeasure");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unitofmeasure(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SensorInfo)
}

::google::protobuf::uint8* SensorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unitofmeasure().data(), static_cast<int>(this->unitofmeasure().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.unitOfMeasure");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unitofmeasure(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorInfo)
  return target;
}

size_t SensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unitofmeasure());
  }

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorInfo)
    MergeFrom(*source);
  }
}

void SensorInfo::MergeFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.unitofmeasure().size() > 0) {

    unitofmeasure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unitofmeasure_);
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void SensorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  return true;
}

void SensorInfo::Swap(SensorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorInfo::InternalSwap(SensorInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  unitofmeasure_.Swap(&other->unitofmeasure_);
  swap(number_, other->number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorInfo::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorInfo

// uint32 number = 1;
void SensorInfo::clear_number() {
  number_ = 0u;
}
::google::protobuf::uint32 SensorInfo::number() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.number)
  return number_;
}
void SensorInfo::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.number)
}

// string name = 2;
void SensorInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SensorInfo::name() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.name)
  return name_.GetNoArena();
}
void SensorInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.name)
}
#if LANG_CXX11
void SensorInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SensorInfo.name)
}
#endif
void SensorInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SensorInfo.name)
}
void SensorInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SensorInfo.name)
}
::std::string* SensorInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.SensorInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorInfo::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.SensorInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SensorInfo.name)
}

// string unitOfMeasure = 3;
void SensorInfo::clear_unitofmeasure() {
  unitofmeasure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SensorInfo::unitofmeasure() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.unitOfMeasure)
  return unitofmeasure_.GetNoArena();
}
void SensorInfo::set_unitofmeasure(const ::std::string& value) {
  
  unitofmeasure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.unitOfMeasure)
}
#if LANG_CXX11
void SensorInfo::set_unitofmeasure(::std::string&& value) {
  
  unitofmeasure_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SensorInfo.unitOfMeasure)
}
#endif
void SensorInfo::set_unitofmeasure(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unitofmeasure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SensorInfo.unitOfMeasure)
}
void SensorInfo::set_unitofmeasure(const char* value, size_t size) {
  
  unitofmeasure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SensorInfo.unitOfMeasure)
}
::std::string* SensorInfo::mutable_unitofmeasure() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.SensorInfo.unitOfMeasure)
  return unitofmeasure_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorInfo::release_unitofmeasure() {
  // @@protoc_insertion_point(field_release:fk_data.SensorInfo.unitOfMeasure)
  
  return unitofmeasure_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorInfo::set_allocated_unitofmeasure(::std::string* unitofmeasure) {
  if (unitofmeasure != NULL) {
    
  } else {
    
  }
  unitofmeasure_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unitofmeasure);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SensorInfo.unitOfMeasure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Firmware::kGitFieldNumber;
const int Firmware::kBuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Firmware::Firmware()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Firmware)
}
Firmware::Firmware(const Firmware& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.git().size() > 0) {
    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.build().size() > 0) {
    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.Firmware)
}

void Firmware::SharedCtor() {
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Firmware::~Firmware() {
  // @@protoc_insertion_point(destructor:fk_data.Firmware)
  SharedDtor();
}

void Firmware::SharedDtor() {
  git_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Firmware::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Firmware::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Firmware& Firmware::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Firmware* Firmware::New(::google::protobuf::Arena* arena) const {
  Firmware* n = new Firmware;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Firmware::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Firmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Firmware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Firmware)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string git = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_git()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->git().data(), static_cast<int>(this->git().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Firmware.git"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string build = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->build().data(), static_cast<int>(this->build().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Firmware.build"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Firmware)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Firmware)
  return false;
#undef DO_
}

void Firmware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Firmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string git = 1;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.git");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->git(), output);
  }

  // string build = 2;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.build");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->build(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Firmware)
}

::google::protobuf::uint8* Firmware::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Firmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string git = 1;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.git");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->git(), target);
  }

  // string build = 2;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.build");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->build(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Firmware)
  return target;
}

size_t Firmware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Firmware)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string git = 1;
  if (this->git().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->git());
  }

  // string build = 2;
  if (this->build().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Firmware::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Firmware)
  GOOGLE_DCHECK_NE(&from, this);
  const Firmware* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Firmware>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Firmware)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Firmware)
    MergeFrom(*source);
  }
}

void Firmware::MergeFrom(const Firmware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Firmware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.git().size() > 0) {

    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  if (from.build().size() > 0) {

    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
}

void Firmware::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Firmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Firmware::CopyFrom(const Firmware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Firmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Firmware::IsInitialized() const {
  return true;
}

void Firmware::Swap(Firmware* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Firmware::InternalSwap(Firmware* other) {
  using std::swap;
  git_.Swap(&other->git_);
  build_.Swap(&other->build_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Firmware::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Firmware

// string git = 1;
void Firmware::clear_git() {
  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Firmware::git() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.git)
  return git_.GetNoArena();
}
void Firmware::set_git(const ::std::string& value) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.git)
}
#if LANG_CXX11
void Firmware::set_git(::std::string&& value) {
  
  git_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.git)
}
#endif
void Firmware::set_git(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.git)
}
void Firmware::set_git(const char* value, size_t size) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.git)
}
::std::string* Firmware::mutable_git() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.git)
  return git_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Firmware::release_git() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.git)
  
  return git_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Firmware::set_allocated_git(::std::string* git) {
  if (git != NULL) {
    
  } else {
    
  }
  git_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), git);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.git)
}

// string build = 2;
void Firmware::clear_build() {
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Firmware::build() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.build)
  return build_.GetNoArena();
}
void Firmware::set_build(const ::std::string& value) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.build)
}
#if LANG_CXX11
void Firmware::set_build(::std::string&& value) {
  
  build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.build)
}
#endif
void Firmware::set_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.build)
}
void Firmware::set_build(const char* value, size_t size) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.build)
}
::std::string* Firmware::mutable_build() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.build)
  return build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Firmware::release_build() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.build)
  
  return build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Firmware::set_allocated_build(::std::string* build) {
  if (build != NULL) {
    
  } else {
    
  }
  build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.build)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kDeviceIdFieldNumber;
const int Metadata::kTimeFieldNumber;
const int Metadata::kGitFieldNumber;
const int Metadata::kBuildFieldNumber;
const int Metadata::kResetCauseFieldNumber;
const int Metadata::kSensorsFieldNumber;
const int Metadata::kModulesFieldNumber;
const int Metadata::kFirmwareFieldNumber;
const int Metadata::kGenerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensors_(from.sensors_),
      modules_(from.modules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.git().size() > 0) {
    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.build().size() > 0) {
    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  generation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.generation().size() > 0) {
    generation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generation_);
  }
  if (from.has_firmware()) {
    firmware_ = new ::fk_data::Firmware(*from.firmware_);
  } else {
    firmware_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&resetcause_) -
    reinterpret_cast<char*>(&time_)) + sizeof(resetcause_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Metadata)
}

void Metadata::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  git_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&firmware_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resetcause_) -
      reinterpret_cast<char*>(&firmware_)) + sizeof(resetcause_));
  _cached_size_ = 0;
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:fk_data.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  git_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete firmware_;
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Metadata& Metadata::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Metadata* Metadata::New(::google::protobuf::Arena* arena) const {
  Metadata* n = new Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  modules_.Clear();
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && firmware_ != NULL) {
    delete firmware_;
  }
  firmware_ = NULL;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resetcause_) -
      reinterpret_cast<char*>(&time_)) + sizeof(resetcause_));
  _internal_metadata_.Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes deviceId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string git = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_git()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->git().data(), static_cast<int>(this->git().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Metadata.git"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 resetCause = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetcause_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.SensorInfo sensors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.ModuleInfo modules = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string build = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->build().data(), static_cast<int>(this->build().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Metadata.build"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Firmware firmware = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firmware()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes generation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->deviceid(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // string git = 3;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.git");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->git(), output);
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resetcause(), output);
  }

  // repeated .fk_data.SensorInfo sensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensors(static_cast<int>(i)), output);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->modules(static_cast<int>(i)), output);
  }

  // string build = 7;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.build");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->build(), output);
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->firmware_, output);
  }

  // bytes generation = 9;
  if (this->generation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->generation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Metadata)
}

::google::protobuf::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->deviceid(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // string git = 3;
  if (this->git().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git().data(), static_cast<int>(this->git().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.git");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->git(), target);
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resetcause(), target);
  }

  // repeated .fk_data.SensorInfo sensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->sensors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->modules(static_cast<int>(i)), deterministic, target);
  }

  // string build = 7;
  if (this->build().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.build");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->build(), target);
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->firmware_, deterministic, target);
  }

  // bytes generation = 9;
  if (this->generation().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->generation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Metadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.SensorInfo sensors = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors(static_cast<int>(i)));
    }
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->modules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modules(static_cast<int>(i)));
    }
  }

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceid());
  }

  // string git = 3;
  if (this->git().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->git());
  }

  // string build = 7;
  if (this->build().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build());
  }

  // bytes generation = 9;
  if (this->generation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->generation());
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->firmware_);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resetcause());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Metadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  modules_.MergeFrom(from.modules_);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.git().size() > 0) {

    git_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  if (from.build().size() > 0) {

    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  if (from.generation().size() > 0) {

    generation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generation_);
  }
  if (from.has_firmware()) {
    mutable_firmware()->::fk_data::Firmware::MergeFrom(from.firmware());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.resetcause() != 0) {
    set_resetcause(from.resetcause());
  }
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  sensors_.InternalSwap(&other->sensors_);
  modules_.InternalSwap(&other->modules_);
  deviceid_.Swap(&other->deviceid_);
  git_.Swap(&other->git_);
  build_.Swap(&other->build_);
  generation_.Swap(&other->generation_);
  swap(firmware_, other->firmware_);
  swap(time_, other->time_);
  swap(resetcause_, other->resetcause_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadata

// bytes deviceId = 1;
void Metadata::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadata::deviceid() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.deviceId)
  return deviceid_.GetNoArena();
}
void Metadata::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.deviceId)
}
#if LANG_CXX11
void Metadata::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.deviceId)
}
#endif
void Metadata::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.deviceId)
}
void Metadata::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.deviceId)
}
::std::string* Metadata::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_deviceid() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.deviceId)
}

// uint64 time = 2;
void Metadata::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Metadata::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.time)
  return time_;
}
void Metadata::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Metadata.time)
}

// string git = 3;
void Metadata::clear_git() {
  git_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadata::git() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.git)
  return git_.GetNoArena();
}
void Metadata::set_git(const ::std::string& value) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.git)
}
#if LANG_CXX11
void Metadata::set_git(::std::string&& value) {
  
  git_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.git)
}
#endif
void Metadata::set_git(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.git)
}
void Metadata::set_git(const char* value, size_t size) {
  
  git_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.git)
}
::std::string* Metadata::mutable_git() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.git)
  return git_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_git() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.git)
  
  return git_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_git(::std::string* git) {
  if (git != NULL) {
    
  } else {
    
  }
  git_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), git);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.git)
}

// string build = 7;
void Metadata::clear_build() {
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadata::build() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.build)
  return build_.GetNoArena();
}
void Metadata::set_build(const ::std::string& value) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.build)
}
#if LANG_CXX11
void Metadata::set_build(::std::string&& value) {
  
  build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.build)
}
#endif
void Metadata::set_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.build)
}
void Metadata::set_build(const char* value, size_t size) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.build)
}
::std::string* Metadata::mutable_build() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.build)
  return build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_build() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.build)
  
  return build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_build(::std::string* build) {
  if (build != NULL) {
    
  } else {
    
  }
  build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.build)
}

// uint32 resetCause = 4;
void Metadata::clear_resetcause() {
  resetcause_ = 0u;
}
::google::protobuf::uint32 Metadata::resetcause() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.resetCause)
  return resetcause_;
}
void Metadata::set_resetcause(::google::protobuf::uint32 value) {
  
  resetcause_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Metadata.resetCause)
}

// repeated .fk_data.SensorInfo sensors = 5;
int Metadata::sensors_size() const {
  return sensors_.size();
}
void Metadata::clear_sensors() {
  sensors_.Clear();
}
const ::fk_data::SensorInfo& Metadata::sensors(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.sensors)
  return sensors_.Get(index);
}
::fk_data::SensorInfo* Metadata::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.sensors)
  return sensors_.Mutable(index);
}
::fk_data::SensorInfo* Metadata::add_sensors() {
  // @@protoc_insertion_point(field_add:fk_data.Metadata.sensors)
  return sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::SensorInfo >*
Metadata::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Metadata.sensors)
  return &sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::SensorInfo >&
Metadata::sensors() const {
  // @@protoc_insertion_point(field_list:fk_data.Metadata.sensors)
  return sensors_;
}

// repeated .fk_data.ModuleInfo modules = 6;
int Metadata::modules_size() const {
  return modules_.size();
}
void Metadata::clear_modules() {
  modules_.Clear();
}
const ::fk_data::ModuleInfo& Metadata::modules(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.modules)
  return modules_.Get(index);
}
::fk_data::ModuleInfo* Metadata::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.modules)
  return modules_.Mutable(index);
}
::fk_data::ModuleInfo* Metadata::add_modules() {
  // @@protoc_insertion_point(field_add:fk_data.Metadata.modules)
  return modules_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::ModuleInfo >*
Metadata::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Metadata.modules)
  return &modules_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::ModuleInfo >&
Metadata::modules() const {
  // @@protoc_insertion_point(field_list:fk_data.Metadata.modules)
  return modules_;
}

// .fk_data.Firmware firmware = 8;
bool Metadata::has_firmware() const {
  return this != internal_default_instance() && firmware_ != NULL;
}
void Metadata::clear_firmware() {
  if (GetArenaNoVirtual() == NULL && firmware_ != NULL) delete firmware_;
  firmware_ = NULL;
}
const ::fk_data::Firmware& Metadata::firmware() const {
  const ::fk_data::Firmware* p = firmware_;
  // @@protoc_insertion_point(field_get:fk_data.Metadata.firmware)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Firmware*>(
      &::fk_data::_Firmware_default_instance_);
}
::fk_data::Firmware* Metadata::mutable_firmware() {
  
  if (firmware_ == NULL) {
    firmware_ = new ::fk_data::Firmware;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.firmware)
  return firmware_;
}
::fk_data::Firmware* Metadata::release_firmware() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.firmware)
  
  ::fk_data::Firmware* temp = firmware_;
  firmware_ = NULL;
  return temp;
}
void Metadata::set_allocated_firmware(::fk_data::Firmware* firmware) {
  delete firmware_;
  firmware_ = firmware;
  if (firmware) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.firmware)
}

// bytes generation = 9;
void Metadata::clear_generation() {
  generation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadata::generation() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.generation)
  return generation_.GetNoArena();
}
void Metadata::set_generation(const ::std::string& value) {
  
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.generation)
}
#if LANG_CXX11
void Metadata::set_generation(::std::string&& value) {
  
  generation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.generation)
}
#endif
void Metadata::set_generation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.generation)
}
void Metadata::set_generation(const void* value, size_t size) {
  
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.generation)
}
::std::string* Metadata::mutable_generation() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.generation)
  return generation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_generation() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.generation)
  
  return generation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_generation(::std::string* generation) {
  if (generation != NULL) {
    
  } else {
    
  }
  generation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generation);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.generation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kTimeFieldNumber;
const int Status::kUptimeFieldNumber;
const int Status::kBatteryFieldNumber;
const int Status::kMemoryFieldNumber;
const int Status::kBusyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_) -
    reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Status)
}

void Status::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  _cached_size_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:fk_data.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float battery = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &battery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 memory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 busy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &busy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uptime(), output);
  }

  // float battery = 3;
  if (this->battery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->battery(), output);
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->memory(), output);
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->busy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uptime(), target);
  }

  // float battery = 3;
  if (this->battery() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->battery(), target);
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->memory(), target);
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->busy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Status)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uptime());
  }

  // float battery = 3;
  if (this->battery() != 0) {
    total_size += 1 + 4;
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->busy());
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->memory());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.battery() != 0) {
    set_battery(from.battery());
  }
  if (from.busy() != 0) {
    set_busy(from.busy());
  }
  if (from.memory() != 0) {
    set_memory(from.memory());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(uptime_, other->uptime_);
  swap(battery_, other->battery_);
  swap(busy_, other->busy_);
  swap(memory_, other->memory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// uint64 time = 1;
void Status::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Status::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.time)
  return time_;
}
void Status::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.time)
}

// uint32 uptime = 2;
void Status::clear_uptime() {
  uptime_ = 0u;
}
::google::protobuf::uint32 Status::uptime() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.uptime)
  return uptime_;
}
void Status::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.uptime)
}

// float battery = 3;
void Status::clear_battery() {
  battery_ = 0;
}
float Status::battery() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.battery)
  return battery_;
}
void Status::set_battery(float value) {
  
  battery_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.battery)
}

// uint32 memory = 4;
void Status::clear_memory() {
  memory_ = 0u;
}
::google::protobuf::uint32 Status::memory() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.memory)
  return memory_;
}
void Status::set_memory(::google::protobuf::uint32 value) {
  
  memory_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.memory)
}

// uint64 busy = 5;
void Status::clear_busy() {
  busy_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Status::busy() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.busy)
  return busy_;
}
void Status::set_busy(::google::protobuf::uint64 value) {
  
  busy_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Status.busy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMessage::kTimeFieldNumber;
const int LogMessage::kUptimeFieldNumber;
const int LogMessage::kLevelFieldNumber;
const int LogMessage::kFacilityFieldNumber;
const int LogMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMessage::LogMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.facility().size() > 0) {
    facility_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&time_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:fk_data.LogMessage)
}

void LogMessage::SharedCtor() {
  facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&time_)) + sizeof(level_));
  _cached_size_ = 0;
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:fk_data.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  facility_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMessage::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogMessage& LogMessage::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogMessage* LogMessage::New(::google::protobuf::Arena* arena) const {
  LogMessage* n = new LogMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facility_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&time_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool LogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.LogMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string facility = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facility()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facility().data(), static_cast<int>(this->facility().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.LogMessage.facility"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.LogMessage.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.LogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.LogMessage)
  return false;
#undef DO_
}

void LogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uptime(), output);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // string facility = 4;
  if (this->facility().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facility().data(), static_cast<int>(this->facility().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.facility");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->facility(), output);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.LogMessage)
}

::google::protobuf::uint8* LogMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uptime(), target);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // string facility = 4;
  if (this->facility().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facility().data(), static_cast<int>(this->facility().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.facility");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->facility(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LogMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string facility = 4;
  if (this->facility().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->facility());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uptime());
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LogMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.facility().size() > 0) {

    facility_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void LogMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::Swap(LogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  facility_.Swap(&other->facility_);
  message_.Swap(&other->message_);
  swap(time_, other->time_);
  swap(uptime_, other->uptime_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMessage::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMessage

// uint64 time = 1;
void LogMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogMessage::time() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.time)
  return time_;
}
void LogMessage::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.time)
}

// uint32 uptime = 2;
void LogMessage::clear_uptime() {
  uptime_ = 0u;
}
::google::protobuf::uint32 LogMessage::uptime() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.uptime)
  return uptime_;
}
void LogMessage::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.uptime)
}

// uint32 level = 3;
void LogMessage::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 LogMessage::level() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.level)
  return level_;
}
void LogMessage::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.level)
}

// string facility = 4;
void LogMessage::clear_facility() {
  facility_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogMessage::facility() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.facility)
  return facility_.GetNoArena();
}
void LogMessage::set_facility(const ::std::string& value) {
  
  facility_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.facility)
}
#if LANG_CXX11
void LogMessage::set_facility(::std::string&& value) {
  
  facility_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LogMessage.facility)
}
#endif
void LogMessage::set_facility(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  facility_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LogMessage.facility)
}
void LogMessage::set_facility(const char* value, size_t size) {
  
  facility_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LogMessage.facility)
}
::std::string* LogMessage::mutable_facility() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.LogMessage.facility)
  return facility_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMessage::release_facility() {
  // @@protoc_insertion_point(field_release:fk_data.LogMessage.facility)
  
  return facility_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMessage::set_allocated_facility(::std::string* facility) {
  if (facility != NULL) {
    
  } else {
    
  }
  facility_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facility);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LogMessage.facility)
}

// string message = 5;
void LogMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogMessage::message() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.message)
  return message_.GetNoArena();
}
void LogMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.message)
}
#if LANG_CXX11
void LogMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LogMessage.message)
}
#endif
void LogMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LogMessage.message)
}
void LogMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LogMessage.message)
}
::std::string* LogMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.LogMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMessage::release_message() {
  // @@protoc_insertion_point(field_release:fk_data.LogMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LogMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorGroup::kModuleFieldNumber;
const int SensorGroup::kReadingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorGroup::SensorGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorGroup)
}
SensorGroup::SensorGroup(const SensorGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      readings_(from.readings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_ = from.module_;
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorGroup)
}

void SensorGroup::SharedCtor() {
  module_ = 0u;
  _cached_size_ = 0;
}

SensorGroup::~SensorGroup() {
  // @@protoc_insertion_point(destructor:fk_data.SensorGroup)
  SharedDtor();
}

void SensorGroup::SharedDtor() {
}

void SensorGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorGroup::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorGroup& SensorGroup::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorGroup* SensorGroup::New(::google::protobuf::Arena* arena) const {
  SensorGroup* n = new SensorGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readings_.Clear();
  module_ = 0u;
  _internal_metadata_.Clear();
}

bool SensorGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SensorGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.SensorAndValue readings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_readings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SensorGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SensorGroup)
  return false;
#undef DO_
}

void SensorGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SensorGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 module = 1;
  if (this->module() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module(), output);
  }

  // repeated .fk_data.SensorAndValue readings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->readings(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SensorGroup)
}

::google::protobuf::uint8* SensorGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 module = 1;
  if (this->module() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module(), target);
  }

  // repeated .fk_data.SensorAndValue readings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->readings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorGroup)
  return target;
}

size_t SensorGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.SensorAndValue readings = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->readings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readings(static_cast<int>(i)));
    }
  }

  // uint32 module = 1;
  if (this->module() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->module());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorGroup)
    MergeFrom(*source);
  }
}

void SensorGroup::MergeFrom(const SensorGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readings_.MergeFrom(from.readings_);
  if (from.module() != 0) {
    set_module(from.module());
  }
}

void SensorGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorGroup::CopyFrom(const SensorGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorGroup::IsInitialized() const {
  return true;
}

void SensorGroup::Swap(SensorGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorGroup::InternalSwap(SensorGroup* other) {
  using std::swap;
  readings_.InternalSwap(&other->readings_);
  swap(module_, other->module_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorGroup::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorGroup

// uint32 module = 1;
void SensorGroup::clear_module() {
  module_ = 0u;
}
::google::protobuf::uint32 SensorGroup::module() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorGroup.module)
  return module_;
}
void SensorGroup::set_module(::google::protobuf::uint32 value) {
  
  module_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SensorGroup.module)
}

// repeated .fk_data.SensorAndValue readings = 2;
int SensorGroup::readings_size() const {
  return readings_.size();
}
void SensorGroup::clear_readings() {
  readings_.Clear();
}
const ::fk_data::SensorAndValue& SensorGroup::readings(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.SensorGroup.readings)
  return readings_.Get(index);
}
::fk_data::SensorAndValue* SensorGroup::mutable_readings(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.SensorGroup.readings)
  return readings_.Mutable(index);
}
::fk_data::SensorAndValue* SensorGroup::add_readings() {
  // @@protoc_insertion_point(field_add:fk_data.SensorGroup.readings)
  return readings_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::SensorAndValue >*
SensorGroup::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.SensorGroup.readings)
  return &readings_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::SensorAndValue >&
SensorGroup::readings() const {
  // @@protoc_insertion_point(field_list:fk_data.SensorGroup.readings)
  return readings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Readings::kTimeFieldNumber;
const int Readings::kReadingFieldNumber;
const int Readings::kFlagsFieldNumber;
const int Readings::kMetaFieldNumber;
const int Readings::kLocationFieldNumber;
const int Readings::kSensorGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Readings::Readings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Readings)
}
Readings::Readings(const Readings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensorgroups_(from.sensorgroups_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::fk_data::DeviceLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&meta_) -
    reinterpret_cast<char*>(&time_)) + sizeof(meta_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Readings)
}

void Readings::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meta_) -
      reinterpret_cast<char*>(&location_)) + sizeof(meta_));
  _cached_size_ = 0;
}

Readings::~Readings() {
  // @@protoc_insertion_point(destructor:fk_data.Readings)
  SharedDtor();
}

void Readings::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void Readings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Readings::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Readings& Readings::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Readings* Readings::New(::google::protobuf::Arena* arena) const {
  Readings* n = new Readings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Readings::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Readings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensorgroups_.Clear();
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meta_) -
      reinterpret_cast<char*>(&time_)) + sizeof(meta_));
  _internal_metadata_.Clear();
}

bool Readings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Readings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.DeviceLocation location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.SensorGroup sensorGroups = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensorgroups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 meta = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Readings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Readings)
  return false;
#undef DO_
}

void Readings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Readings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // uint32 reading = 2;
  if (this->reading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reading(), output);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // repeated .fk_data.SensorGroup sensorGroups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensorgroups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensorgroups(static_cast<int>(i)), output);
  }

  // uint32 meta = 6;
  if (this->meta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->meta(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Readings)
}

::google::protobuf::uint8* Readings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Readings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // uint32 reading = 2;
  if (this->reading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reading(), target);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, deterministic, target);
  }

  // repeated .fk_data.SensorGroup sensorGroups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensorgroups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->sensorgroups(static_cast<int>(i)), deterministic, target);
  }

  // uint32 meta = 6;
  if (this->meta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->meta(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Readings)
  return target;
}

size_t Readings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Readings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.SensorGroup sensorGroups = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sensorgroups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensorgroups(static_cast<int>(i)));
    }
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 reading = 2;
  if (this->reading() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reading());
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // uint32 meta = 6;
  if (this->meta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->meta());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Readings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Readings)
  GOOGLE_DCHECK_NE(&from, this);
  const Readings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Readings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Readings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Readings)
    MergeFrom(*source);
  }
}

void Readings::MergeFrom(const Readings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Readings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensorgroups_.MergeFrom(from.sensorgroups_);
  if (from.has_location()) {
    mutable_location()->::fk_data::DeviceLocation::MergeFrom(from.location());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.reading() != 0) {
    set_reading(from.reading());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.meta() != 0) {
    set_meta(from.meta());
  }
}

void Readings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Readings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Readings::CopyFrom(const Readings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Readings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Readings::IsInitialized() const {
  return true;
}

void Readings::Swap(Readings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Readings::InternalSwap(Readings* other) {
  using std::swap;
  sensorgroups_.InternalSwap(&other->sensorgroups_);
  swap(location_, other->location_);
  swap(time_, other->time_);
  swap(reading_, other->reading_);
  swap(flags_, other->flags_);
  swap(meta_, other->meta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Readings::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Readings

// uint64 time = 1;
void Readings::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Readings::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.time)
  return time_;
}
void Readings::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Readings.time)
}

// uint32 reading = 2;
void Readings::clear_reading() {
  reading_ = 0u;
}
::google::protobuf::uint32 Readings::reading() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.reading)
  return reading_;
}
void Readings::set_reading(::google::protobuf::uint32 value) {
  
  reading_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Readings.reading)
}

// uint32 flags = 3;
void Readings::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 Readings::flags() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.flags)
  return flags_;
}
void Readings::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Readings.flags)
}

// uint32 meta = 6;
void Readings::clear_meta() {
  meta_ = 0u;
}
::google::protobuf::uint32 Readings::meta() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.meta)
  return meta_;
}
void Readings::set_meta(::google::protobuf::uint32 value) {
  
  meta_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Readings.meta)
}

// .fk_data.DeviceLocation location = 4;
bool Readings::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Readings::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::fk_data::DeviceLocation& Readings::location() const {
  const ::fk_data::DeviceLocation* p = location_;
  // @@protoc_insertion_point(field_get:fk_data.Readings.location)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::DeviceLocation*>(
      &::fk_data::_DeviceLocation_default_instance_);
}
::fk_data::DeviceLocation* Readings::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::fk_data::DeviceLocation;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.Readings.location)
  return location_;
}
::fk_data::DeviceLocation* Readings::release_location() {
  // @@protoc_insertion_point(field_release:fk_data.Readings.location)
  
  ::fk_data::DeviceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void Readings::set_allocated_location(::fk_data::DeviceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.Readings.location)
}

// repeated .fk_data.SensorGroup sensorGroups = 5;
int Readings::sensorgroups_size() const {
  return sensorgroups_.size();
}
void Readings::clear_sensorgroups() {
  sensorgroups_.Clear();
}
const ::fk_data::SensorGroup& Readings::sensorgroups(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.sensorGroups)
  return sensorgroups_.Get(index);
}
::fk_data::SensorGroup* Readings::mutable_sensorgroups(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Readings.sensorGroups)
  return sensorgroups_.Mutable(index);
}
::fk_data::SensorGroup* Readings::add_sensorgroups() {
  // @@protoc_insertion_point(field_add:fk_data.Readings.sensorGroups)
  return sensorgroups_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::SensorGroup >*
Readings::mutable_sensorgroups() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Readings.sensorGroups)
  return &sensorgroups_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::SensorGroup >&
Readings::sensorgroups() const {
  // @@protoc_insertion_point(field_list:fk_data.Readings.sensorGroups)
  return sensorgroups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobSchedule::kCronFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobSchedule::JobSchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.JobSchedule)
}
JobSchedule::JobSchedule(const JobSchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cron_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cron().size() > 0) {
    cron_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cron_);
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.JobSchedule)
}

void JobSchedule::SharedCtor() {
  cron_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JobSchedule::~JobSchedule() {
  // @@protoc_insertion_point(destructor:fk_data.JobSchedule)
  SharedDtor();
}

void JobSchedule::SharedDtor() {
  cron_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobSchedule::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobSchedule& JobSchedule::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobSchedule* JobSchedule::New(::google::protobuf::Arena* arena) const {
  JobSchedule* n = new JobSchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.JobSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cron_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JobSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.JobSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes cron = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.JobSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.JobSchedule)
  return false;
#undef DO_
}

void JobSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.JobSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cron = 1;
  if (this->cron().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cron(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.JobSchedule)
}

::google::protobuf::uint8* JobSchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.JobSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cron = 1;
  if (this->cron().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cron(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.JobSchedule)
  return target;
}

size_t JobSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.JobSchedule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes cron = 1;
  if (this->cron().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cron());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobSchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.JobSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobSchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.JobSchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.JobSchedule)
    MergeFrom(*source);
  }
}

void JobSchedule::MergeFrom(const JobSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.JobSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cron().size() > 0) {

    cron_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cron_);
  }
}

void JobSchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.JobSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedule::CopyFrom(const JobSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.JobSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedule::IsInitialized() const {
  return true;
}

void JobSchedule::Swap(JobSchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobSchedule::InternalSwap(JobSchedule* other) {
  using std::swap;
  cron_.Swap(&other->cron_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobSchedule::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobSchedule

// bytes cron = 1;
void JobSchedule::clear_cron() {
  cron_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobSchedule::cron() const {
  // @@protoc_insertion_point(field_get:fk_data.JobSchedule.cron)
  return cron_.GetNoArena();
}
void JobSchedule::set_cron(const ::std::string& value) {
  
  cron_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.JobSchedule.cron)
}
#if LANG_CXX11
void JobSchedule::set_cron(::std::string&& value) {
  
  cron_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.JobSchedule.cron)
}
#endif
void JobSchedule::set_cron(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cron_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.JobSchedule.cron)
}
void JobSchedule::set_cron(const void* value, size_t size) {
  
  cron_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.JobSchedule.cron)
}
::std::string* JobSchedule::mutable_cron() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.JobSchedule.cron)
  return cron_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobSchedule::release_cron() {
  // @@protoc_insertion_point(field_release:fk_data.JobSchedule.cron)
  
  return cron_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobSchedule::set_allocated_cron(::std::string* cron) {
  if (cron != NULL) {
    
  } else {
    
  }
  cron_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cron);
  // @@protoc_insertion_point(field_set_allocated:fk_data.JobSchedule.cron)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule::kReadingsFieldNumber;
const int Schedule::kMiscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule::Schedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_readings()) {
    readings_ = new ::fk_data::JobSchedule(*from.readings_);
  } else {
    readings_ = NULL;
  }
  if (from.has_misc()) {
    misc_ = new ::fk_data::JobSchedule(*from.misc_);
  } else {
    misc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.Schedule)
}

void Schedule::SharedCtor() {
  ::memset(&readings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_) -
      reinterpret_cast<char*>(&readings_)) + sizeof(misc_));
  _cached_size_ = 0;
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:fk_data.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  if (this != internal_default_instance()) delete readings_;
  if (this != internal_default_instance()) delete misc_;
}

void Schedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedule::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schedule& Schedule::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Schedule* Schedule::New(::google::protobuf::Arena* arena) const {
  Schedule* n = new Schedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && readings_ != NULL) {
    delete readings_;
  }
  readings_ = NULL;
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
  _internal_metadata_.Clear();
}

bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Schedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fk_data.JobSchedule readings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.JobSchedule misc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Schedule)
  return false;
#undef DO_
}

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.JobSchedule readings = 1;
  if (this->has_readings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->readings_, output);
  }

  // .fk_data.JobSchedule misc = 2;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->misc_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Schedule)
}

::google::protobuf::uint8* Schedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.JobSchedule readings = 1;
  if (this->has_readings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->readings_, deterministic, target);
  }

  // .fk_data.JobSchedule misc = 2;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->misc_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Schedule)
  return target;
}

size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Schedule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .fk_data.JobSchedule readings = 1;
  if (this->has_readings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->readings_);
  }

  // .fk_data.JobSchedule misc = 2;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->misc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Schedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_readings()) {
    mutable_readings()->::fk_data::JobSchedule::MergeFrom(from.readings());
  }
  if (from.has_misc()) {
    mutable_misc()->::fk_data::JobSchedule::MergeFrom(from.misc());
  }
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  swap(readings_, other->readings_);
  swap(misc_, other->misc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Schedule

// .fk_data.JobSchedule readings = 1;
bool Schedule::has_readings() const {
  return this != internal_default_instance() && readings_ != NULL;
}
void Schedule::clear_readings() {
  if (GetArenaNoVirtual() == NULL && readings_ != NULL) delete readings_;
  readings_ = NULL;
}
const ::fk_data::JobSchedule& Schedule::readings() const {
  const ::fk_data::JobSchedule* p = readings_;
  // @@protoc_insertion_point(field_get:fk_data.Schedule.readings)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::JobSchedule*>(
      &::fk_data::_JobSchedule_default_instance_);
}
::fk_data::JobSchedule* Schedule::mutable_readings() {
  
  if (readings_ == NULL) {
    readings_ = new ::fk_data::JobSchedule;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.Schedule.readings)
  return readings_;
}
::fk_data::JobSchedule* Schedule::release_readings() {
  // @@protoc_insertion_point(field_release:fk_data.Schedule.readings)
  
  ::fk_data::JobSchedule* temp = readings_;
  readings_ = NULL;
  return temp;
}
void Schedule::set_allocated_readings(::fk_data::JobSchedule* readings) {
  delete readings_;
  readings_ = readings;
  if (readings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.Schedule.readings)
}

// .fk_data.JobSchedule misc = 2;
bool Schedule::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
void Schedule::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) delete misc_;
  misc_ = NULL;
}
const ::fk_data::JobSchedule& Schedule::misc() const {
  const ::fk_data::JobSchedule* p = misc_;
  // @@protoc_insertion_point(field_get:fk_data.Schedule.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::JobSchedule*>(
      &::fk_data::_JobSchedule_default_instance_);
}
::fk_data::JobSchedule* Schedule::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::fk_data::JobSchedule;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.Schedule.misc)
  return misc_;
}
::fk_data::JobSchedule* Schedule::release_misc() {
  // @@protoc_insertion_point(field_release:fk_data.Schedule.misc)
  
  ::fk_data::JobSchedule* temp = misc_;
  misc_ = NULL;
  return temp;
}
void Schedule::set_allocated_misc(::fk_data::JobSchedule* misc) {
  delete misc_;
  misc_ = misc;
  if (misc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.Schedule.misc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Identity::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Identity::Identity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Identity)
}
Identity::Identity(const Identity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.Identity)
}

void Identity::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:fk_data.Identity)
  SharedDtor();
}

void Identity::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Identity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Identity::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Identity& Identity::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Identity* Identity::New(::google::protobuf::Arena* arena) const {
  Identity* n = new Identity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Identity::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Identity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Identity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Identity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.Identity.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Identity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Identity)
  return false;
#undef DO_
}

void Identity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Identity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Identity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Identity)
}

::google::protobuf::uint8* Identity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Identity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.Identity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Identity)
  return target;
}

size_t Identity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Identity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Identity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  const Identity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Identity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Identity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Identity)
    MergeFrom(*source);
  }
}

void Identity::MergeFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Identity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identity::CopyFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity::IsInitialized() const {
  return true;
}

void Identity::Swap(Identity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Identity::InternalSwap(Identity* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Identity::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Identity

// string name = 1;
void Identity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Identity::name() const {
  // @@protoc_insertion_point(field_get:fk_data.Identity.name)
  return name_.GetNoArena();
}
void Identity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.Identity.name)
}
#if LANG_CXX11
void Identity::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Identity.name)
}
#endif
void Identity::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Identity.name)
}
void Identity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Identity.name)
}
::std::string* Identity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.Identity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Identity::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.Identity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Identity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Identity.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Condition::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Condition::Condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Condition)
}
Condition::Condition(const Condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:fk_data.Condition)
}

void Condition::SharedCtor() {
  flags_ = 0u;
  _cached_size_ = 0;
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:fk_data.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
}

void Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Condition::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Condition& Condition::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Condition* Condition::New(::google::protobuf::Arena* arena) const {
  Condition* n = new Condition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_ = 0u;
  _internal_metadata_.Clear();
}

bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.Condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.Condition)
  return false;
#undef DO_
}

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.Condition)
}

::google::protobuf::uint8* Condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flags(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Condition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::Swap(Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Condition::InternalSwap(Condition* other) {
  using std::swap;
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Condition

// uint32 flags = 1;
void Condition::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 Condition::flags() const {
  // @@protoc_insertion_point(field_get:fk_data.Condition.flags)
  return flags_;
}
void Condition::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:fk_data.Condition.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInfo::kSsidFieldNumber;
const int NetworkInfo::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInfo::NetworkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.NetworkInfo)
}
NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ssid().size() > 0) {
    ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.NetworkInfo)
}

void NetworkInfo::SharedCtor() {
  ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetworkInfo::~NetworkInfo() {
  // @@protoc_insertion_point(destructor:fk_data.NetworkInfo)
  SharedDtor();
}

void NetworkInfo::SharedDtor() {
  ssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkInfo::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkInfo& NetworkInfo::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkInfo* NetworkInfo::New(::google::protobuf::Arena* arena) const {
  NetworkInfo* n = new NetworkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NetworkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.NetworkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ssid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ssid().data(), static_cast<int>(this->ssid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.NetworkInfo.ssid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fk_data.NetworkInfo.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.NetworkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.NetworkInfo)
  return false;
#undef DO_
}

void NetworkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ssid().data(), static_cast<int>(this->ssid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.NetworkInfo.ssid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ssid(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.NetworkInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.NetworkInfo)
}

::google::protobuf::uint8* NetworkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ssid().data(), static_cast<int>(this->ssid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.NetworkInfo.ssid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ssid(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fk_data.NetworkInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.NetworkInfo)
  return target;
}

size_t NetworkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.NetworkInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ssid());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.NetworkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.NetworkInfo)
    MergeFrom(*source);
  }
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {

    ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void NetworkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  return true;
}

void NetworkInfo::Swap(NetworkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkInfo::InternalSwap(NetworkInfo* other) {
  using std::swap;
  ssid_.Swap(&other->ssid_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkInfo::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkInfo

// string ssid = 1;
void NetworkInfo::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkInfo::ssid() const {
  // @@protoc_insertion_point(field_get:fk_data.NetworkInfo.ssid)
  return ssid_.GetNoArena();
}
void NetworkInfo::set_ssid(const ::std::string& value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.NetworkInfo.ssid)
}
#if LANG_CXX11
void NetworkInfo::set_ssid(::std::string&& value) {
  
  ssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.NetworkInfo.ssid)
}
#endif
void NetworkInfo::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.NetworkInfo.ssid)
}
void NetworkInfo::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.NetworkInfo.ssid)
}
::std::string* NetworkInfo::mutable_ssid() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.NetworkInfo.ssid)
  return ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInfo::release_ssid() {
  // @@protoc_insertion_point(field_release:fk_data.NetworkInfo.ssid)
  
  return ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInfo::set_allocated_ssid(::std::string* ssid) {
  if (ssid != NULL) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:fk_data.NetworkInfo.ssid)
}

// string password = 2;
void NetworkInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkInfo::password() const {
  // @@protoc_insertion_point(field_get:fk_data.NetworkInfo.password)
  return password_.GetNoArena();
}
void NetworkInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.NetworkInfo.password)
}
#if LANG_CXX11
void NetworkInfo::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.NetworkInfo.password)
}
#endif
void NetworkInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.NetworkInfo.password)
}
void NetworkInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.NetworkInfo.password)
}
::std::string* NetworkInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.NetworkInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInfo::release_password() {
  // @@protoc_insertion_point(field_release:fk_data.NetworkInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:fk_data.NetworkInfo.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkSettings::kNetworksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkSettings::NetworkSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.NetworkSettings)
}
NetworkSettings::NetworkSettings(const NetworkSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      networks_(from.networks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fk_data.NetworkSettings)
}

void NetworkSettings::SharedCtor() {
  _cached_size_ = 0;
}

NetworkSettings::~NetworkSettings() {
  // @@protoc_insertion_point(destructor:fk_data.NetworkSettings)
  SharedDtor();
}

void NetworkSettings::SharedDtor() {
}

void NetworkSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkSettings::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkSettings& NetworkSettings::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkSettings* NetworkSettings::New(::google::protobuf::Arena* arena) const {
  NetworkSettings* n = new NetworkSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.NetworkSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networks_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.NetworkSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fk_data.NetworkInfo networks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_networks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.NetworkSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.NetworkSettings)
  return false;
#undef DO_
}

void NetworkSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.NetworkSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fk_data.NetworkInfo networks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->networks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->networks(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.NetworkSettings)
}

::google::protobuf::uint8* NetworkSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.NetworkSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fk_data.NetworkInfo networks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->networks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->networks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.NetworkSettings)
  return target;
}

size_t NetworkSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.NetworkSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.NetworkInfo networks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->networks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->networks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.NetworkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.NetworkSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.NetworkSettings)
    MergeFrom(*source);
  }
}

void NetworkSettings::MergeFrom(const NetworkSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.NetworkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networks_.MergeFrom(from.networks_);
}

void NetworkSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.NetworkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkSettings::CopyFrom(const NetworkSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.NetworkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSettings::IsInitialized() const {
  return true;
}

void NetworkSettings::Swap(NetworkSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkSettings::InternalSwap(NetworkSettings* other) {
  using std::swap;
  networks_.InternalSwap(&other->networks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkSettings::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkSettings

// repeated .fk_data.NetworkInfo networks = 1;
int NetworkSettings::networks_size() const {
  return networks_.size();
}
void NetworkSettings::clear_networks() {
  networks_.Clear();
}
const ::fk_data::NetworkInfo& NetworkSettings::networks(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.NetworkSettings.networks)
  return networks_.Get(index);
}
::fk_data::NetworkInfo* NetworkSettings::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.NetworkSettings.networks)
  return networks_.Mutable(index);
}
::fk_data::NetworkInfo* NetworkSettings::add_networks() {
  // @@protoc_insertion_point(field_add:fk_data.NetworkSettings.networks)
  return networks_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::NetworkInfo >*
NetworkSettings::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.NetworkSettings.networks)
  return &networks_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::NetworkInfo >&
NetworkSettings::networks() const {
  // @@protoc_insertion_point(field_list:fk_data.NetworkSettings.networks)
  return networks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoraSettings::kDeviceEuiFieldNumber;
const int LoraSettings::kAppKeyFieldNumber;
const int LoraSettings::kAppEuiFieldNumber;
const int LoraSettings::kFrequencyBandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoraSettings::LoraSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LoraSettings)
}
LoraSettings::LoraSettings(const LoraSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceeui_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceeui().size() > 0) {
    deviceeui_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceeui_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  appeui_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appeui().size() > 0) {
    appeui_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appeui_);
  }
  frequencyband_ = from.frequencyband_;
  // @@protoc_insertion_point(copy_constructor:fk_data.LoraSettings)
}

void LoraSettings::SharedCtor() {
  deviceeui_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appeui_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequencyband_ = 0u;
  _cached_size_ = 0;
}

LoraSettings::~LoraSettings() {
  // @@protoc_insertion_point(destructor:fk_data.LoraSettings)
  SharedDtor();
}

void LoraSettings::SharedDtor() {
  deviceeui_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appeui_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoraSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoraSettings::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoraSettings& LoraSettings::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoraSettings* LoraSettings::New(::google::protobuf::Arena* arena) const {
  LoraSettings* n = new LoraSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LoraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceeui_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appeui_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequencyband_ = 0u;
  _internal_metadata_.Clear();
}

bool LoraSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.LoraSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes deviceEui = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceeui()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes appKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes appEui = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appeui()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frequencyBand = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequencyband_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.LoraSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.LoraSettings)
  return false;
#undef DO_
}

void LoraSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.LoraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceEui = 1;
  if (this->deviceeui().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->deviceeui(), output);
  }

  // bytes appKey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->appkey(), output);
  }

  // bytes appEui = 3;
  if (this->appeui().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->appeui(), output);
  }

  // uint32 frequencyBand = 4;
  if (this->frequencyband() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frequencyband(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.LoraSettings)
}

::google::protobuf::uint8* LoraSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LoraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceEui = 1;
  if (this->deviceeui().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->deviceeui(), target);
  }

  // bytes appKey = 2;
  if (this->appkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->appkey(), target);
  }

  // bytes appEui = 3;
  if (this->appeui().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->appeui(), target);
  }

  // uint32 frequencyBand = 4;
  if (this->frequencyband() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frequencyband(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LoraSettings)
  return target;
}

size_t LoraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LoraSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes deviceEui = 1;
  if (this->deviceeui().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceeui());
  }

  // bytes appKey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->appkey());
  }

  // bytes appEui = 3;
  if (this->appeui().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->appeui());
  }

  // uint32 frequencyBand = 4;
  if (this->frequencyband() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frequencyband());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoraSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LoraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const LoraSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoraSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LoraSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LoraSettings)
    MergeFrom(*source);
  }
}

void LoraSettings::MergeFrom(const LoraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LoraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceeui().size() > 0) {

    deviceeui_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceeui_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.appeui().size() > 0) {

    appeui_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appeui_);
  }
  if (from.frequencyband() != 0) {
    set_frequencyband(from.frequencyband());
  }
}

void LoraSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LoraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoraSettings::CopyFrom(const LoraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LoraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoraSettings::IsInitialized() const {
  return true;
}

void LoraSettings::Swap(LoraSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoraSettings::InternalSwap(LoraSettings* other) {
  using std::swap;
  deviceeui_.Swap(&other->deviceeui_);
  appkey_.Swap(&other->appkey_);
  appeui_.Swap(&other->appeui_);
  swap(frequencyband_, other->frequencyband_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoraSettings::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoraSettings

// bytes deviceEui = 1;
void LoraSettings::clear_deviceeui() {
  deviceeui_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoraSettings::deviceeui() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.deviceEui)
  return deviceeui_.GetNoArena();
}
void LoraSettings::set_deviceeui(const ::std::string& value) {
  
  deviceeui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.deviceEui)
}
#if LANG_CXX11
void LoraSettings::set_deviceeui(::std::string&& value) {
  
  deviceeui_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.deviceEui)
}
#endif
void LoraSettings::set_deviceeui(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceeui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.deviceEui)
}
void LoraSettings::set_deviceeui(const void* value, size_t size) {
  
  deviceeui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.deviceEui)
}
::std::string* LoraSettings::mutable_deviceeui() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.deviceEui)
  return deviceeui_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoraSettings::release_deviceeui() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.deviceEui)
  
  return deviceeui_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoraSettings::set_allocated_deviceeui(::std::string* deviceeui) {
  if (deviceeui != NULL) {
    
  } else {
    
  }
  deviceeui_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceeui);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.deviceEui)
}

// bytes appKey = 2;
void LoraSettings::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoraSettings::appkey() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.appKey)
  return appkey_.GetNoArena();
}
void LoraSettings::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.appKey)
}
#if LANG_CXX11
void LoraSettings::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.appKey)
}
#endif
void LoraSettings::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.appKey)
}
void LoraSettings::set_appkey(const void* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.appKey)
}
::std::string* LoraSettings::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.appKey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoraSettings::release_appkey() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.appKey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoraSettings::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.appKey)
}

// bytes appEui = 3;
void LoraSettings::clear_appeui() {
  appeui_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoraSettings::appeui() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.appEui)
  return appeui_.GetNoArena();
}
void LoraSettings::set_appeui(const ::std::string& value) {
  
  appeui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.appEui)
}
#if LANG_CXX11
void LoraSettings::set_appeui(::std::string&& value) {
  
  appeui_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.appEui)
}
#endif
void LoraSettings::set_appeui(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appeui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.appEui)
}
void LoraSettings::set_appeui(const void* value, size_t size) {
  
  appeui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.appEui)
}
::std::string* LoraSettings::mutable_appeui() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.appEui)
  return appeui_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoraSettings::release_appeui() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.appEui)
  
  return appeui_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoraSettings::set_allocated_appeui(::std::string* appeui) {
  if (appeui != NULL) {
    
  } else {
    
  }
  appeui_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appeui);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.appEui)
}

// uint32 frequencyBand = 4;
void LoraSettings::clear_frequencyband() {
  frequencyband_ = 0u;
}
::google::protobuf::uint32 LoraSettings::frequencyband() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.frequencyBand)
  return frequencyband_;
}
void LoraSettings::set_frequencyband(::google::protobuf::uint32 value) {
  
  frequencyband_ = value;
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.frequencyBand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataRecord::kLoggedReadingFieldNumber;
const int DataRecord::kMetadataFieldNumber;
const int DataRecord::kLogFieldNumber;
const int DataRecord::kStatusFieldNumber;
const int DataRecord::kReadingsFieldNumber;
const int DataRecord::kModulesFieldNumber;
const int DataRecord::kScheduleFieldNumber;
const int DataRecord::kMetaFieldNumber;
const int DataRecord::kIdentityFieldNumber;
const int DataRecord::kConditionFieldNumber;
const int DataRecord::kLoraFieldNumber;
const int DataRecord::kNetworkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataRecord::DataRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.DataRecord)
}
DataRecord::DataRecord(const DataRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      modules_(from.modules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loggedreading()) {
    loggedreading_ = new ::fk_data::LoggedReading(*from.loggedreading_);
  } else {
    loggedreading_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::fk_data::Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  if (from.has_log()) {
    log_ = new ::fk_data::LogMessage(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::fk_data::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_readings()) {
    readings_ = new ::fk_data::Readings(*from.readings_);
  } else {
    readings_ = NULL;
  }
  if (from.has_schedule()) {
    schedule_ = new ::fk_data::Schedule(*from.schedule_);
  } else {
    schedule_ = NULL;
  }
  if (from.has_identity()) {
    identity_ = new ::fk_data::Identity(*from.identity_);
  } else {
    identity_ = NULL;
  }
  if (from.has_condition()) {
    condition_ = new ::fk_data::Condition(*from.condition_);
  } else {
    condition_ = NULL;
  }
  if (from.has_lora()) {
    lora_ = new ::fk_data::LoraSettings(*from.lora_);
  } else {
    lora_ = NULL;
  }
  if (from.has_network()) {
    network_ = new ::fk_data::NetworkSettings(*from.network_);
  } else {
    network_ = NULL;
  }
  meta_ = from.meta_;
  // @@protoc_insertion_point(copy_constructor:fk_data.DataRecord)
}

void DataRecord::SharedCtor() {
  ::memset(&loggedreading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meta_) -
      reinterpret_cast<char*>(&loggedreading_)) + sizeof(meta_));
  _cached_size_ = 0;
}

DataRecord::~DataRecord() {
  // @@protoc_insertion_point(destructor:fk_data.DataRecord)
  SharedDtor();
}

void DataRecord::SharedDtor() {
  if (this != internal_default_instance()) delete loggedreading_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete readings_;
  if (this != internal_default_instance()) delete schedule_;
  if (this != internal_default_instance()) delete identity_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete lora_;
  if (this != internal_default_instance()) delete network_;
}

void DataRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRecord::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataRecord& DataRecord::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataRecord* DataRecord::New(::google::protobuf::Arena* arena) const {
  DataRecord* n = new DataRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.DataRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modules_.Clear();
  if (GetArenaNoVirtual() == NULL && loggedreading_ != NULL) {
    delete loggedreading_;
  }
  loggedreading_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && readings_ != NULL) {
    delete readings_;
  }
  readings_ = NULL;
  if (GetArenaNoVirtual() == NULL && schedule_ != NULL) {
    delete schedule_;
  }
  schedule_ = NULL;
  if (GetArenaNoVirtual() == NULL && identity_ != NULL) {
    delete identity_;
  }
  identity_ = NULL;
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
  if (GetArenaNoVirtual() == NULL && lora_ != NULL) {
    delete lora_;
  }
  lora_ = NULL;
  if (GetArenaNoVirtual() == NULL && network_ != NULL) {
    delete network_;
  }
  network_ = NULL;
  meta_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool DataRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.DataRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fk_data.LoggedReading loggedReading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loggedreading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Metadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.LogMessage log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Readings readings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fk_data.ModuleInfo modules = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Schedule schedule = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 meta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &meta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Identity identity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.Condition condition = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.LoraSettings lora = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lora()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fk_data.NetworkSettings network = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.DataRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.DataRecord)
  return false;
#undef DO_
}

void DataRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.DataRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->loggedreading_, output);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->log_, output);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_, output);
  }

  // .fk_data.Readings readings = 5;
  if (this->has_readings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->readings_, output);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->modules(static_cast<int>(i)), output);
  }

  // .fk_data.Schedule schedule = 7;
  if (this->has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->schedule_, output);
  }

  // uint64 meta = 8;
  if (this->meta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->meta(), output);
  }

  // .fk_data.Identity identity = 9;
  if (this->has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->identity_, output);
  }

  // .fk_data.Condition condition = 10;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->condition_, output);
  }

  // .fk_data.LoraSettings lora = 11;
  if (this->has_lora()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->lora_, output);
  }

  // .fk_data.NetworkSettings network = 12;
  if (this->has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->network_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.DataRecord)
}

::google::protobuf::uint8* DataRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.DataRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->loggedreading_, deterministic, target);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metadata_, deterministic, target);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->log_, deterministic, target);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_, deterministic, target);
  }

  // .fk_data.Readings readings = 5;
  if (this->has_readings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->readings_, deterministic, target);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->modules(static_cast<int>(i)), deterministic, target);
  }

  // .fk_data.Schedule schedule = 7;
  if (this->has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->schedule_, deterministic, target);
  }

  // uint64 meta = 8;
  if (this->meta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->meta(), target);
  }

  // .fk_data.Identity identity = 9;
  if (this->has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->identity_, deterministic, target);
  }

  // .fk_data.Condition condition = 10;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->condition_, deterministic, target);
  }

  // .fk_data.LoraSettings lora = 11;
  if (this->has_lora()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->lora_, deterministic, target);
  }

  // .fk_data.NetworkSettings network = 12;
  if (this->has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->network_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.DataRecord)
  return target;
}

size_t DataRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.DataRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fk_data.ModuleInfo modules = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->modules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modules(static_cast<int>(i)));
    }
  }

  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loggedreading_);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->log_);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // .fk_data.Readings readings = 5;
  if (this->has_readings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->readings_);
  }

  // .fk_data.Schedule schedule = 7;
  if (this->has_schedule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->schedule_);
  }

  // .fk_data.Identity identity = 9;
  if (this->has_identity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->identity_);
  }

  // .fk_data.Condition condition = 10;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->condition_);
  }

  // .fk_data.LoraSettings lora = 11;
  if (this->has_lora()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lora_);
  }

  // .fk_data.NetworkSettings network = 12;
  if (this->has_network()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_);
  }

  // uint64 meta = 8;
  if (this->meta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->meta());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.DataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.DataRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.DataRecord)
    MergeFrom(*source);
  }
}

void DataRecord::MergeFrom(const DataRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.DataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modules_.MergeFrom(from.modules_);
  if (from.has_loggedreading()) {
    mutable_loggedreading()->::fk_data::LoggedReading::MergeFrom(from.loggedreading());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::fk_data::Metadata::MergeFrom(from.metadata());
  }
  if (from.has_log()) {
    mutable_log()->::fk_data::LogMessage::MergeFrom(from.log());
  }
  if (from.has_status()) {
    mutable_status()->::fk_data::Status::MergeFrom(from.status());
  }
  if (from.has_readings()) {
    mutable_readings()->::fk_data::Readings::MergeFrom(from.readings());
  }
  if (from.has_schedule()) {
    mutable_schedule()->::fk_data::Schedule::MergeFrom(from.schedule());
  }
  if (from.has_identity()) {
    mutable_identity()->::fk_data::Identity::MergeFrom(from.identity());
  }
  if (from.has_condition()) {
    mutable_condition()->::fk_data::Condition::MergeFrom(from.condition());
  }
  if (from.has_lora()) {
    mutable_lora()->::fk_data::LoraSettings::MergeFrom(from.lora());
  }
  if (from.has_network()) {
    mutable_network()->::fk_data::NetworkSettings::MergeFrom(from.network());
  }
  if (from.meta() != 0) {
    set_meta(from.meta());
  }
}

void DataRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.DataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRecord::CopyFrom(const DataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.DataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRecord::IsInitialized() const {
  return true;
}

void DataRecord::Swap(DataRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataRecord::InternalSwap(DataRecord* other) {
  using std::swap;
  modules_.InternalSwap(&other->modules_);
  swap(loggedreading_, other->loggedreading_);
  swap(metadata_, other->metadata_);
  swap(log_, other->log_);
  swap(status_, other->status_);
  swap(readings_, other->readings_);
  swap(schedule_, other->schedule_);
  swap(identity_, other->identity_);
  swap(condition_, other->condition_);
  swap(lora_, other->lora_);
  swap(network_, other->network_);
  swap(meta_, other->meta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataRecord::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataRecord

// .fk_data.LoggedReading loggedReading = 1;
bool DataRecord::has_loggedreading() const {
  return this != internal_default_instance() && loggedreading_ != NULL;
}
void DataRecord::clear_loggedreading() {
  if (GetArenaNoVirtual() == NULL && loggedreading_ != NULL) delete loggedreading_;
  loggedreading_ = NULL;
}
const ::fk_data::LoggedReading& DataRecord::loggedreading() const {
  const ::fk_data::LoggedReading* p = loggedreading_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.loggedReading)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::LoggedReading*>(
      &::fk_data::_LoggedReading_default_instance_);
}
::fk_data::LoggedReading* DataRecord::mutable_loggedreading() {
  
  if (loggedreading_ == NULL) {
    loggedreading_ = new ::fk_data::LoggedReading;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.loggedReading)
  return loggedreading_;
}
::fk_data::LoggedReading* DataRecord::release_loggedreading() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.loggedReading)
  
  ::fk_data::LoggedReading* temp = loggedreading_;
  loggedreading_ = NULL;
  return temp;
}
void DataRecord::set_allocated_loggedreading(::fk_data::LoggedReading* loggedreading) {
  delete loggedreading_;
  loggedreading_ = loggedreading;
  if (loggedreading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.loggedReading)
}

// .fk_data.Metadata metadata = 2;
bool DataRecord::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void DataRecord::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::fk_data::Metadata& DataRecord::metadata() const {
  const ::fk_data::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Metadata*>(
      &::fk_data::_Metadata_default_instance_);
}
::fk_data::Metadata* DataRecord::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::fk_data::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.metadata)
  return metadata_;
}
::fk_data::Metadata* DataRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.metadata)
  
  ::fk_data::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void DataRecord::set_allocated_metadata(::fk_data::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.metadata)
}

// .fk_data.LogMessage log = 3;
bool DataRecord::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
void DataRecord::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) delete log_;
  log_ = NULL;
}
const ::fk_data::LogMessage& DataRecord::log() const {
  const ::fk_data::LogMessage* p = log_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.log)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::LogMessage*>(
      &::fk_data::_LogMessage_default_instance_);
}
::fk_data::LogMessage* DataRecord::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::fk_data::LogMessage;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.log)
  return log_;
}
::fk_data::LogMessage* DataRecord::release_log() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.log)
  
  ::fk_data::LogMessage* temp = log_;
  log_ = NULL;
  return temp;
}
void DataRecord::set_allocated_log(::fk_data::LogMessage* log) {
  delete log_;
  log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.log)
}

// .fk_data.Status status = 4;
bool DataRecord::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void DataRecord::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::fk_data::Status& DataRecord::status() const {
  const ::fk_data::Status* p = status_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.status)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Status*>(
      &::fk_data::_Status_default_instance_);
}
::fk_data::Status* DataRecord::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::fk_data::Status;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.status)
  return status_;
}
::fk_data::Status* DataRecord::release_status() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.status)
  
  ::fk_data::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void DataRecord::set_allocated_status(::fk_data::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.status)
}

// .fk_data.Readings readings = 5;
bool DataRecord::has_readings() const {
  return this != internal_default_instance() && readings_ != NULL;
}
void DataRecord::clear_readings() {
  if (GetArenaNoVirtual() == NULL && readings_ != NULL) delete readings_;
  readings_ = NULL;
}
const ::fk_data::Readings& DataRecord::readings() const {
  const ::fk_data::Readings* p = readings_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.readings)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Readings*>(
      &::fk_data::_Readings_default_instance_);
}
::fk_data::Readings* DataRecord::mutable_readings() {
  
  if (readings_ == NULL) {
    readings_ = new ::fk_data::Readings;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.readings)
  return readings_;
}
::fk_data::Readings* DataRecord::release_readings() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.readings)
  
  ::fk_data::Readings* temp = readings_;
  readings_ = NULL;
  return temp;
}
void DataRecord::set_allocated_readings(::fk_data::Readings* readings) {
  delete readings_;
  readings_ = readings;
  if (readings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.readings)
}

// repeated .fk_data.ModuleInfo modules = 6;
int DataRecord::modules_size() const {
  return modules_.size();
}
void DataRecord::clear_modules() {
  modules_.Clear();
}
const ::fk_data::ModuleInfo& DataRecord::modules(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.modules)
  return modules_.Get(index);
}
::fk_data::ModuleInfo* DataRecord::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.modules)
  return modules_.Mutable(index);
}
::fk_data::ModuleInfo* DataRecord::add_modules() {
  // @@protoc_insertion_point(field_add:fk_data.DataRecord.modules)
  return modules_.Add();
}
::google::protobuf::RepeatedPtrField< ::fk_data::ModuleInfo >*
DataRecord::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.DataRecord.modules)
  return &modules_;
}
const ::google::protobuf::RepeatedPtrField< ::fk_data::ModuleInfo >&
DataRecord::modules() const {
  // @@protoc_insertion_point(field_list:fk_data.DataRecord.modules)
  return modules_;
}

// .fk_data.Schedule schedule = 7;
bool DataRecord::has_schedule() const {
  return this != internal_default_instance() && schedule_ != NULL;
}
void DataRecord::clear_schedule() {
  if (GetArenaNoVirtual() == NULL && schedule_ != NULL) delete schedule_;
  schedule_ = NULL;
}
const ::fk_data::Schedule& DataRecord::schedule() const {
  const ::fk_data::Schedule* p = schedule_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Schedule*>(
      &::fk_data::_Schedule_default_instance_);
}
::fk_data::Schedule* DataRecord::mutable_schedule() {
  
  if (schedule_ == NULL) {
    schedule_ = new ::fk_data::Schedule;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.schedule)
  return schedule_;
}
::fk_data::Schedule* DataRecord::release_schedule() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.schedule)
  
  ::fk_data::Schedule* temp = schedule_;
  schedule_ = NULL;
  return temp;
}
void DataRecord::set_allocated_schedule(::fk_data::Schedule* schedule) {
  delete schedule_;
  schedule_ = schedule;
  if (schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.schedule)
}

// uint64 meta = 8;
void DataRecord::clear_meta() {
  meta_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DataRecord::meta() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.meta)
  return meta_;
}
void DataRecord::set_meta(::google::protobuf::uint64 value) {
  
  meta_ = value;
  // @@protoc_insertion_point(field_set:fk_data.DataRecord.meta)
}

// .fk_data.Identity identity = 9;
bool DataRecord::has_identity() const {
  return this != internal_default_instance() && identity_ != NULL;
}
void DataRecord::clear_identity() {
  if (GetArenaNoVirtual() == NULL && identity_ != NULL) delete identity_;
  identity_ = NULL;
}
const ::fk_data::Identity& DataRecord::identity() const {
  const ::fk_data::Identity* p = identity_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.identity)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Identity*>(
      &::fk_data::_Identity_default_instance_);
}
::fk_data::Identity* DataRecord::mutable_identity() {
  
  if (identity_ == NULL) {
    identity_ = new ::fk_data::Identity;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.identity)
  return identity_;
}
::fk_data::Identity* DataRecord::release_identity() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.identity)
  
  ::fk_data::Identity* temp = identity_;
  identity_ = NULL;
  return temp;
}
void DataRecord::set_allocated_identity(::fk_data::Identity* identity) {
  delete identity_;
  identity_ = identity;
  if (identity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.identity)
}

// .fk_data.Condition condition = 10;
bool DataRecord::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
void DataRecord::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) delete condition_;
  condition_ = NULL;
}
const ::fk_data::Condition& DataRecord::condition() const {
  const ::fk_data::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.condition)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::Condition*>(
      &::fk_data::_Condition_default_instance_);
}
::fk_data::Condition* DataRecord::mutable_condition() {
  
  if (condition_ == NULL) {
    condition_ = new ::fk_data::Condition;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.condition)
  return condition_;
}
::fk_data::Condition* DataRecord::release_condition() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.condition)
  
  ::fk_data::Condition* temp = condition_;
  condition_ = NULL;
  return temp;
}
void DataRecord::set_allocated_condition(::fk_data::Condition* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.condition)
}

// .fk_data.LoraSettings lora = 11;
bool DataRecord::has_lora() const {
  return this != internal_default_instance() && lora_ != NULL;
}
void DataRecord::clear_lora() {
  if (GetArenaNoVirtual() == NULL && lora_ != NULL) delete lora_;
  lora_ = NULL;
}
const ::fk_data::LoraSettings& DataRecord::lora() const {
  const ::fk_data::LoraSettings* p = lora_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.lora)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::LoraSettings*>(
      &::fk_data::_LoraSettings_default_instance_);
}
::fk_data::LoraSettings* DataRecord::mutable_lora() {
  
  if (lora_ == NULL) {
    lora_ = new ::fk_data::LoraSettings;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.lora)
  return lora_;
}
::fk_data::LoraSettings* DataRecord::release_lora() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.lora)
  
  ::fk_data::LoraSettings* temp = lora_;
  lora_ = NULL;
  return temp;
}
void DataRecord::set_allocated_lora(::fk_data::LoraSettings* lora) {
  delete lora_;
  lora_ = lora;
  if (lora) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.lora)
}

// .fk_data.NetworkSettings network = 12;
bool DataRecord::has_network() const {
  return this != internal_default_instance() && network_ != NULL;
}
void DataRecord::clear_network() {
  if (GetArenaNoVirtual() == NULL && network_ != NULL) delete network_;
  network_ = NULL;
}
const ::fk_data::NetworkSettings& DataRecord::network() const {
  const ::fk_data::NetworkSettings* p = network_;
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.network)
  return p != NULL ? *p : *reinterpret_cast<const ::fk_data::NetworkSettings*>(
      &::fk_data::_NetworkSettings_default_instance_);
}
::fk_data::NetworkSettings* DataRecord::mutable_network() {
  
  if (network_ == NULL) {
    network_ = new ::fk_data::NetworkSettings;
  }
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.network)
  return network_;
}
::fk_data::NetworkSettings* DataRecord::release_network() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.network)
  
  ::fk_data::NetworkSettings* temp = network_;
  network_ = NULL;
  return temp;
}
void DataRecord::set_allocated_network(::fk_data::NetworkSettings* network) {
  delete network_;
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.network)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedRecord::kKindFieldNumber;
const int SignedRecord::kTimeFieldNumber;
const int SignedRecord::kDataFieldNumber;
const int SignedRecord::kHashFieldNumber;
const int SignedRecord::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedRecord::SignedRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fk_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SignedRecord)
}
SignedRecord::SignedRecord(const SignedRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&time_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SignedRecord)
}

void SignedRecord::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&time_)) + sizeof(kind_));
  _cached_size_ = 0;
}

SignedRecord::~SignedRecord() {
  // @@protoc_insertion_point(destructor:fk_data.SignedRecord)
  SharedDtor();
}

void SignedRecord::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignedRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedRecord::descriptor() {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignedRecord& SignedRecord::default_instance() {
  protobuf_fk_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignedRecord* SignedRecord::New(::google::protobuf::Arena* arena) const {
  SignedRecord* n = new SignedRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignedRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SignedRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&time_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

bool SignedRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fk_data.SignedRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fk_data.SignedRecordKind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::fk_data::SignedRecordKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 record = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fk_data.SignedRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fk_data.SignedRecord)
  return false;
#undef DO_
}

void SignedRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fk_data.SignedRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.SignedRecordKind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->hash(), output);
  }

  // uint64 record = 5;
  if (this->record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->record(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fk_data.SignedRecord)
}

::google::protobuf::uint8* SignedRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SignedRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.SignedRecordKind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hash(), target);
  }

  // uint64 record = 5;
  if (this->record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->record(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SignedRecord)
  return target;
}

size_t SignedRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SignedRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint64 record = 5;
  if (this->record() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record());
  }

  // .fk_data.SignedRecordKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SignedRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SignedRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SignedRecord)
    MergeFrom(*source);
  }
}

void SignedRecord::MergeFrom(const SignedRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SignedRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.record() != 0) {
    set_record(from.record());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void SignedRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SignedRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedRecord::CopyFrom(const SignedRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SignedRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedRecord::IsInitialized() const {
  return true;
}

void SignedRecord::Swap(SignedRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedRecord::InternalSwap(SignedRecord* other) {
  using std::swap;
  data_.Swap(&other->data_);
  hash_.Swap(&other->hash_);
  swap(time_, other->time_);
  swap(record_, other->record_);
  swap(kind_, other->kind_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignedRecord::GetMetadata() const {
  protobuf_fk_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fk_2ddata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignedRecord

// .fk_data.SignedRecordKind kind = 1;
void SignedRecord::clear_kind() {
  kind_ = 0;
}
::fk_data::SignedRecordKind SignedRecord::kind() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.kind)
  return static_cast< ::fk_data::SignedRecordKind >(kind_);
}
void SignedRecord::set_kind(::fk_data::SignedRecordKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.kind)
}

// uint64 time = 2;
void SignedRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SignedRecord::time() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.time)
  return time_;
}
void SignedRecord::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.time)
}

// bytes data = 3;
void SignedRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignedRecord::data() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.data)
  return data_.GetNoArena();
}
void SignedRecord::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.data)
}
#if LANG_CXX11
void SignedRecord::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SignedRecord.data)
}
#endif
void SignedRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SignedRecord.data)
}
void SignedRecord::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SignedRecord.data)
}
::std::string* SignedRecord::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.SignedRecord.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignedRecord::release_data() {
  // @@protoc_insertion_point(field_release:fk_data.SignedRecord.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedRecord::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SignedRecord.data)
}

// bytes hash = 4;
void SignedRecord::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignedRecord::hash() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.hash)
  return hash_.GetNoArena();
}
void SignedRecord::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.hash)
}
#if LANG_CXX11
void SignedRecord::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SignedRecord.hash)
}
#endif
void SignedRecord::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SignedRecord.hash)
}
void SignedRecord::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SignedRecord.hash)
}
::std::string* SignedRecord::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:fk_data.SignedRecord.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignedRecord::release_hash() {
  // @@protoc_insertion_point(field_release:fk_data.SignedRecord.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedRecord::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SignedRecord.hash)
}

// uint64 record = 5;
void SignedRecord::clear_record() {
  record_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SignedRecord::record() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.record)
  return record_;
}
void SignedRecord::set_record(::google::protobuf::uint64 value) {
  
  record_ = value;
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fk_data

// @@protoc_insertion_point(global_scope)
