/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9-dev at Tue May 22 14:02:27 2018. */

#ifndef PB_FK_DATA_FK_DATA_PB_H_INCLUDED
#define PB_FK_DATA_FK_DATA_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _fk_data_DeviceLocation {
    uint32_t fix;
    uint64_t time;
    float longitude;
    float latitude;
    float altitude;
/* @@protoc_insertion_point(struct:fk_data_DeviceLocation) */
} fk_data_DeviceLocation;

typedef struct _fk_data_LogMessage {
    uint64_t time;
    uint32_t uptime;
    uint32_t level;
    pb_callback_t facility;
    pb_callback_t message;
/* @@protoc_insertion_point(struct:fk_data_LogMessage) */
} fk_data_LogMessage;

typedef struct _fk_data_Metadata {
    pb_callback_t deviceId;
    uint64_t time;
    pb_callback_t git;
    uint32_t resetCause;
    pb_callback_t sensors;
    pb_callback_t modules;
    pb_callback_t build;
/* @@protoc_insertion_point(struct:fk_data_Metadata) */
} fk_data_Metadata;

typedef struct _fk_data_ModuleInfo {
    uint32_t id;
    uint32_t address;
    pb_callback_t name;
/* @@protoc_insertion_point(struct:fk_data_ModuleInfo) */
} fk_data_ModuleInfo;

typedef struct _fk_data_SensorAndValue {
    uint32_t sensor;
    float value;
/* @@protoc_insertion_point(struct:fk_data_SensorAndValue) */
} fk_data_SensorAndValue;

typedef struct _fk_data_SensorInfo {
    uint32_t sensor;
    pb_callback_t name;
    pb_callback_t unitOfMeasure;
/* @@protoc_insertion_point(struct:fk_data_SensorInfo) */
} fk_data_SensorInfo;

typedef struct _fk_data_SensorReading {
    uint32_t reading;
    uint64_t time;
    uint32_t sensor;
    float value;
/* @@protoc_insertion_point(struct:fk_data_SensorReading) */
} fk_data_SensorReading;

typedef struct _fk_data_Status {
    uint64_t time;
    uint32_t uptime;
    float battery;
    uint32_t memory;
    uint64_t busy;
/* @@protoc_insertion_point(struct:fk_data_Status) */
} fk_data_Status;

typedef struct _fk_data_LoggedReading {
    uint32_t version;
    fk_data_DeviceLocation location;
    fk_data_SensorReading reading;
/* @@protoc_insertion_point(struct:fk_data_LoggedReading) */
} fk_data_LoggedReading;

typedef struct _fk_data_ReadingsGroup {
    uint32_t version;
    uint32_t reading;
    uint64_t time;
    fk_data_DeviceLocation location;
    pb_callback_t readings;
/* @@protoc_insertion_point(struct:fk_data_ReadingsGroup) */
} fk_data_ReadingsGroup;

typedef struct _fk_data_DataRecord {
    fk_data_LoggedReading loggedReading;
    fk_data_Metadata metadata;
    fk_data_LogMessage log;
    fk_data_Status status;
    fk_data_ReadingsGroup readingsGroup;
/* @@protoc_insertion_point(struct:fk_data_DataRecord) */
} fk_data_DataRecord;

/* Default values for struct fields */

/* Initializer values for message structs */
#define fk_data_DeviceLocation_init_default      {0, 0, 0, 0, 0}
#define fk_data_SensorReading_init_default       {0, 0, 0, 0}
#define fk_data_LoggedReading_init_default       {0, fk_data_DeviceLocation_init_default, fk_data_SensorReading_init_default}
#define fk_data_SensorAndValue_init_default      {0, 0}
#define fk_data_ReadingsGroup_init_default       {0, 0, 0, fk_data_DeviceLocation_init_default, {{NULL}, NULL}}
#define fk_data_ModuleInfo_init_default          {0, 0, {{NULL}, NULL}}
#define fk_data_SensorInfo_init_default          {0, {{NULL}, NULL}, {{NULL}, NULL}}
#define fk_data_Metadata_init_default            {{{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define fk_data_Status_init_default              {0, 0, 0, 0, 0}
#define fk_data_LogMessage_init_default          {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define fk_data_DataRecord_init_default          {fk_data_LoggedReading_init_default, fk_data_Metadata_init_default, fk_data_LogMessage_init_default, fk_data_Status_init_default, fk_data_ReadingsGroup_init_default}
#define fk_data_DeviceLocation_init_zero         {0, 0, 0, 0, 0}
#define fk_data_SensorReading_init_zero          {0, 0, 0, 0}
#define fk_data_LoggedReading_init_zero          {0, fk_data_DeviceLocation_init_zero, fk_data_SensorReading_init_zero}
#define fk_data_SensorAndValue_init_zero         {0, 0}
#define fk_data_ReadingsGroup_init_zero          {0, 0, 0, fk_data_DeviceLocation_init_zero, {{NULL}, NULL}}
#define fk_data_ModuleInfo_init_zero             {0, 0, {{NULL}, NULL}}
#define fk_data_SensorInfo_init_zero             {0, {{NULL}, NULL}, {{NULL}, NULL}}
#define fk_data_Metadata_init_zero               {{{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define fk_data_Status_init_zero                 {0, 0, 0, 0, 0}
#define fk_data_LogMessage_init_zero             {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define fk_data_DataRecord_init_zero             {fk_data_LoggedReading_init_zero, fk_data_Metadata_init_zero, fk_data_LogMessage_init_zero, fk_data_Status_init_zero, fk_data_ReadingsGroup_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define fk_data_DeviceLocation_fix_tag           1
#define fk_data_DeviceLocation_time_tag          2
#define fk_data_DeviceLocation_longitude_tag     3
#define fk_data_DeviceLocation_latitude_tag      4
#define fk_data_DeviceLocation_altitude_tag      5
#define fk_data_LogMessage_time_tag              1
#define fk_data_LogMessage_uptime_tag            2
#define fk_data_LogMessage_level_tag             3
#define fk_data_LogMessage_facility_tag          4
#define fk_data_LogMessage_message_tag           5
#define fk_data_Metadata_deviceId_tag            1
#define fk_data_Metadata_time_tag                2
#define fk_data_Metadata_git_tag                 3
#define fk_data_Metadata_build_tag               7
#define fk_data_Metadata_resetCause_tag          4
#define fk_data_Metadata_sensors_tag             5
#define fk_data_Metadata_modules_tag             6
#define fk_data_ModuleInfo_id_tag                1
#define fk_data_ModuleInfo_address_tag           2
#define fk_data_ModuleInfo_name_tag              3
#define fk_data_SensorAndValue_sensor_tag        1
#define fk_data_SensorAndValue_value_tag         2
#define fk_data_SensorInfo_sensor_tag            1
#define fk_data_SensorInfo_name_tag              2
#define fk_data_SensorInfo_unitOfMeasure_tag     3
#define fk_data_SensorReading_reading_tag        1
#define fk_data_SensorReading_time_tag           2
#define fk_data_SensorReading_sensor_tag         3
#define fk_data_SensorReading_value_tag          4
#define fk_data_Status_time_tag                  1
#define fk_data_Status_uptime_tag                2
#define fk_data_Status_battery_tag               3
#define fk_data_Status_memory_tag                4
#define fk_data_Status_busy_tag                  5
#define fk_data_LoggedReading_version_tag        1
#define fk_data_LoggedReading_location_tag       2
#define fk_data_LoggedReading_reading_tag        3
#define fk_data_ReadingsGroup_version_tag        1
#define fk_data_ReadingsGroup_reading_tag        2
#define fk_data_ReadingsGroup_time_tag           3
#define fk_data_ReadingsGroup_location_tag       4
#define fk_data_ReadingsGroup_readings_tag       5
#define fk_data_DataRecord_loggedReading_tag     1
#define fk_data_DataRecord_metadata_tag          2
#define fk_data_DataRecord_log_tag               3
#define fk_data_DataRecord_status_tag            4
#define fk_data_DataRecord_readingsGroup_tag     5

/* Struct field encoding specification for nanopb */
extern const pb_field_t fk_data_DeviceLocation_fields[6];
extern const pb_field_t fk_data_SensorReading_fields[5];
extern const pb_field_t fk_data_LoggedReading_fields[4];
extern const pb_field_t fk_data_SensorAndValue_fields[3];
extern const pb_field_t fk_data_ReadingsGroup_fields[6];
extern const pb_field_t fk_data_ModuleInfo_fields[4];
extern const pb_field_t fk_data_SensorInfo_fields[4];
extern const pb_field_t fk_data_Metadata_fields[8];
extern const pb_field_t fk_data_Status_fields[6];
extern const pb_field_t fk_data_LogMessage_fields[6];
extern const pb_field_t fk_data_DataRecord_fields[6];

/* Maximum encoded size of messages (where known) */
#define fk_data_DeviceLocation_size              32
#define fk_data_SensorReading_size               28
#define fk_data_LoggedReading_size               70
#define fk_data_SensorAndValue_size              11
/* fk_data_ReadingsGroup_size depends on runtime parameters */
/* fk_data_ModuleInfo_size depends on runtime parameters */
/* fk_data_SensorInfo_size depends on runtime parameters */
/* fk_data_Metadata_size depends on runtime parameters */
#define fk_data_Status_size                      39
/* fk_data_LogMessage_size depends on runtime parameters */
#define fk_data_DataRecord_size                  (131 + fk_data_Metadata_size + fk_data_LogMessage_size + fk_data_ReadingsGroup_size)

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FK_DATA_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
